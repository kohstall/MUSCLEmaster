
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b4  080076b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076bc  080076bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000070  08007734  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08007734  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288f  00000000  00000000  00036163  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  000389f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  00039ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002188e  00000000  00000000  0003b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbaf  00000000  00000000  0005cd5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccb51  00000000  00000000  0006c90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013945e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ac  00000000  00000000  001394dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800761c 	.word	0x0800761c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800761c 	.word	0x0800761c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fcab 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f005 fe88 	bl	80062c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fcc3 	bl	8000f6e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000600:	f000 fc8b 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000098 	.word	0x20000098

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f005 fe26 	bl	8006318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f93a 	bl	8000974 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000744:	2b01      	cmp	r3, #1
 8000746:	d101      	bne.n	800074c <HAL_ADC_ConfigChannel+0x1c>
 8000748:	2302      	movs	r3, #2
 800074a:	e105      	b.n	8000958 <HAL_ADC_ConfigChannel+0x228>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2201      	movs	r2, #1
 8000750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d925      	bls.n	80007a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68d9      	ldr	r1, [r3, #12]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	3b1e      	subs	r3, #30
 8000772:	2207      	movs	r2, #7
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	43da      	mvns	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	400a      	ands	r2, r1
 8000780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68d9      	ldr	r1, [r3, #12]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	4603      	mov	r3, r0
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4403      	add	r3, r0
 800079a:	3b1e      	subs	r3, #30
 800079c:	409a      	lsls	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	e022      	b.n	80007ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6919      	ldr	r1, [r3, #16]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	2207      	movs	r2, #7
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	400a      	ands	r2, r1
 80007ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6919      	ldr	r1, [r3, #16]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	4603      	mov	r3, r0
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4403      	add	r3, r0
 80007e4:	409a      	lsls	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d824      	bhi.n	8000840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	3b05      	subs	r3, #5
 8000808:	221f      	movs	r2, #31
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	3b05      	subs	r3, #5
 8000832:	fa00 f203 	lsl.w	r2, r0, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	e04c      	b.n	80008da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b0c      	cmp	r3, #12
 8000846:	d824      	bhi.n	8000892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	3b23      	subs	r3, #35	; 0x23
 800085a:	221f      	movs	r2, #31
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43da      	mvns	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	3b23      	subs	r3, #35	; 0x23
 8000884:	fa00 f203 	lsl.w	r2, r0, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	430a      	orrs	r2, r1
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
 8000890:	e023      	b.n	80008da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	3b41      	subs	r3, #65	; 0x41
 80008a4:	221f      	movs	r2, #31
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	400a      	ands	r2, r1
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	3b41      	subs	r3, #65	; 0x41
 80008ce:	fa00 f203 	lsl.w	r2, r0, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_ADC_ConfigChannel+0x234>)
 80008dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a21      	ldr	r2, [pc, #132]	; (8000968 <HAL_ADC_ConfigChannel+0x238>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d109      	bne.n	80008fc <HAL_ADC_ConfigChannel+0x1cc>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b12      	cmp	r3, #18
 80008ee:	d105      	bne.n	80008fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_ADC_ConfigChannel+0x238>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d123      	bne.n	800094e <HAL_ADC_ConfigChannel+0x21e>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b10      	cmp	r3, #16
 800090c:	d003      	beq.n	8000916 <HAL_ADC_ConfigChannel+0x1e6>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b11      	cmp	r3, #17
 8000914:	d11b      	bne.n	800094e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b10      	cmp	r3, #16
 8000928:	d111      	bne.n	800094e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_ADC_ConfigChannel+0x23c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_ADC_ConfigChannel+0x240>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	0c9a      	lsrs	r2, r3, #18
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000940:	e002      	b.n	8000948 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	3b01      	subs	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f9      	bne.n	8000942 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40012300 	.word	0x40012300
 8000968:	40012000 	.word	0x40012000
 800096c:	20000008 	.word	0x20000008
 8000970:	431bde83 	.word	0x431bde83

08000974 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800097c:	4b79      	ldr	r3, [pc, #484]	; (8000b64 <ADC_Init+0x1f0>)
 800097e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	431a      	orrs	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6859      	ldr	r1, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	021a      	lsls	r2, r3, #8
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80009cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6859      	ldr	r1, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	430a      	orrs	r2, r1
 80009de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6899      	ldr	r1, [r3, #8]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	4a58      	ldr	r2, [pc, #352]	; (8000b68 <ADC_Init+0x1f4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d022      	beq.n	8000a52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6899      	ldr	r1, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	e00f      	b.n	8000a72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0202 	bic.w	r2, r2, #2
 8000a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6899      	ldr	r1, [r3, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e1b      	ldrb	r3, [r3, #24]
 8000a8c:	005a      	lsls	r2, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d01b      	beq.n	8000ad8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000aae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000abe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6859      	ldr	r1, [r3, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	3b01      	subs	r3, #1
 8000acc:	035a      	lsls	r2, r3, #13
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	e007      	b.n	8000ae8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	051a      	lsls	r2, r3, #20
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6899      	ldr	r1, [r3, #8]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b2a:	025a      	lsls	r2, r3, #9
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6899      	ldr	r1, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	029a      	lsls	r2, r3, #10
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	609a      	str	r2, [r3, #8]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40012300 	.word	0x40012300
 8000b68:	0f000001 	.word	0x0f000001

08000b6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0ed      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f005 fc70 	bl	8006470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0202 	bic.w	r2, r2, #2
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba0:	f7ff fd54 	bl	800064c <HAL_GetTick>
 8000ba4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ba6:	e012      	b.n	8000bce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba8:	f7ff fd50 	bl	800064c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d90b      	bls.n	8000bce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2205      	movs	r2, #5
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0c5      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e5      	bne.n	8000ba8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bec:	f7ff fd2e 	bl	800064c <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf2:	e012      	b.n	8000c1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf4:	f7ff fd2a 	bl	800064c <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d90b      	bls.n	8000c1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e09f      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e5      	beq.n	8000bf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7e1b      	ldrb	r3, [r3, #24]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7e9b      	ldrb	r3, [r3, #26]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d108      	bne.n	8000c96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0220 	orr.w	r2, r2, #32
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0220 	bic.w	r2, r2, #32
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7edb      	ldrb	r3, [r3, #27]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d108      	bne.n	8000cc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0210 	bic.w	r2, r2, #16
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0210 	orr.w	r2, r2, #16
 8000cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7f1b      	ldrb	r3, [r3, #28]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0208 	orr.w	r2, r2, #8
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0208 	bic.w	r2, r2, #8
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7f5b      	ldrb	r3, [r3, #29]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0204 	orr.w	r2, r2, #4
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0204 	bic.w	r2, r2, #4
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	ea42 0103 	orr.w	r1, r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d004      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e00c      	b.n	8000fbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2205      	movs	r2, #5
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d00b      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101a:	2b11      	cmp	r3, #17
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b12      	cmp	r3, #18
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0xfc>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b12      	cmp	r3, #18
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <HAL_GPIO_Init+0x308>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HAL_GPIO_Init+0x308>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_GPIO_Init+0x308>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5a      	ldr	r2, [pc, #360]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x314>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x318>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x328>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a31      	ldr	r2, [pc, #196]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x330>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_GPIO_Init+0x330>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_GPIO_Init+0x330>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	3724      	adds	r7, #36	; 0x24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	401a      	ands	r2, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	429a      	cmp	r2, r3
 800134a:	d104      	bne.n	8001356 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001354:	e002      	b.n	800135c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e11f      	b.n	80015ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f005 f8b6 	bl	8006500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013cc:	f000 fe36 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a7b      	ldr	r2, [pc, #492]	; (80015c4 <HAL_I2C_Init+0x25c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d807      	bhi.n	80013ec <HAL_I2C_Init+0x84>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <HAL_I2C_Init+0x260>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	e006      	b.n	80013fa <HAL_I2C_Init+0x92>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a77      	ldr	r2, [pc, #476]	; (80015cc <HAL_I2C_Init+0x264>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf94      	ite	ls
 80013f4:	2301      	movls	r3, #1
 80013f6:	2300      	movhi	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0db      	b.n	80015ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a72      	ldr	r2, [pc, #456]	; (80015d0 <HAL_I2C_Init+0x268>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a64      	ldr	r2, [pc, #400]	; (80015c4 <HAL_I2C_Init+0x25c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d802      	bhi.n	800143c <HAL_I2C_Init+0xd4>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	e009      	b.n	8001450 <HAL_I2C_Init+0xe8>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a63      	ldr	r2, [pc, #396]	; (80015d4 <HAL_I2C_Init+0x26c>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	3301      	adds	r3, #1
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	430b      	orrs	r3, r1
 8001456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4956      	ldr	r1, [pc, #344]	; (80015c4 <HAL_I2C_Init+0x25c>)
 800146c:	428b      	cmp	r3, r1
 800146e:	d80d      	bhi.n	800148c <HAL_I2C_Init+0x124>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e59      	subs	r1, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fbb1 f3f3 	udiv	r3, r1, r3
 800147e:	3301      	adds	r3, #1
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	2b04      	cmp	r3, #4
 8001486:	bf38      	it	cc
 8001488:	2304      	movcc	r3, #4
 800148a:	e04f      	b.n	800152c <HAL_I2C_Init+0x1c4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d111      	bne.n	80014b8 <HAL_I2C_Init+0x150>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e58      	subs	r0, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	440b      	add	r3, r1
 80014a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e012      	b.n	80014de <HAL_I2C_Init+0x176>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1e58      	subs	r0, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	0099      	lsls	r1, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_Init+0x17e>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e022      	b.n	800152c <HAL_I2C_Init+0x1c4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10e      	bne.n	800150c <HAL_I2C_Init+0x1a4>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1e58      	subs	r0, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6859      	ldr	r1, [r3, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	440b      	add	r3, r1
 80014fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001500:	3301      	adds	r3, #1
 8001502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150a:	e00f      	b.n	800152c <HAL_I2C_Init+0x1c4>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	0099      	lsls	r1, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	6809      	ldr	r1, [r1, #0]
 8001530:	4313      	orrs	r3, r2
 8001532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800155a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6911      	ldr	r1, [r2, #16]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68d2      	ldr	r2, [r2, #12]
 8001566:	4311      	orrs	r1, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2220      	movs	r2, #32
 80015a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	000186a0 	.word	0x000186a0
 80015c8:	001e847f 	.word	0x001e847f
 80015cc:	003d08ff 	.word	0x003d08ff
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	10624dd3 	.word	0x10624dd3

080015d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b08f      	sub	sp, #60	; 0x3c
 80015dc:	af0a      	add	r7, sp, #40	; 0x28
 80015de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e10f      	b.n	800180a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d106      	bne.n	800160a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f005 fa03 	bl	8006a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2203      	movs	r2, #3
 800160e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fdb2 	bl	8005192 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	687e      	ldr	r6, [r7, #4]
 8001636:	466d      	mov	r5, sp
 8001638:	f106 0410 	add.w	r4, r6, #16
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001648:	e885 0003 	stmia.w	r5, {r0, r1}
 800164c:	1d33      	adds	r3, r6, #4
 800164e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f003 fd3d 	bl	80050d0 <USB_CoreInit>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0d0      	b.n	800180a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fda0 	bl	80051b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e04a      	b.n	8001710 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	333d      	adds	r3, #61	; 0x3d
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	333c      	adds	r3, #60	; 0x3c
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	b298      	uxth	r0, r3
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3342      	adds	r3, #66	; 0x42
 80016b6:	4602      	mov	r2, r0
 80016b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	333f      	adds	r3, #63	; 0x3f
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3344      	adds	r3, #68	; 0x44
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3348      	adds	r3, #72	; 0x48
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3350      	adds	r3, #80	; 0x50
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	3301      	adds	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3af      	bcc.n	800167a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e044      	b.n	80017aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	3301      	adds	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3b5      	bcc.n	8001720 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	687e      	ldr	r6, [r7, #4]
 80017bc:	466d      	mov	r5, sp
 80017be:	f106 0410 	add.w	r4, r6, #16
 80017c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80017d2:	1d33      	adds	r3, r6, #4
 80017d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f003 fd16 	bl	8005208 <USB_DevInit>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00d      	b.n	800180a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fed3 	bl	80055ae <USB_DevDisconnect>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e25b      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d075      	beq.n	800191e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001832:	4ba3      	ldr	r3, [pc, #652]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4ba0      	ldr	r3, [pc, #640]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001846:	2b08      	cmp	r3, #8
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b9d      	ldr	r3, [pc, #628]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b99      	ldr	r3, [pc, #612]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05b      	beq.n	800191c <HAL_RCC_OscConfig+0x108>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d157      	bne.n	800191c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e236      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x74>
 800187a:	4b91      	ldr	r3, [pc, #580]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a90      	ldr	r2, [pc, #576]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xb0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x98>
 8001892:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a8a      	ldr	r2, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a87      	ldr	r2, [pc, #540]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xb0>
 80018ac:	4b84      	ldr	r3, [pc, #528]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a83      	ldr	r2, [pc, #524]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a80      	ldr	r2, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7fe febe 	bl	800064c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d4:	f7fe feba 	bl	800064c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1fb      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xc0>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe feaa 	bl	800064c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7fe fea6 	bl	800064c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1e7      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0xe8>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800192a:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x152>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1bb      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4952      	ldr	r1, [pc, #328]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7fe fe5f 	bl	800064c <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7fe fe5b 	bl	800064c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e19c      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4940      	ldr	r1, [pc, #256]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7fe fe3e 	bl	800064c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7fe fe3a 	bl	800064c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e17b      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d030      	beq.n	8001a60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_RCC_OscConfig+0x2b4>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7fe fe1e 	bl	800064c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a14:	f7fe fe1a 	bl	800064c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e15b      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x200>
 8001a32:	e015      	b.n	8001a60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x2b4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fe07 	bl	800064c <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7fe fe03 	bl	800064c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e144      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a0 	beq.w	8001bae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x2b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_RCC_OscConfig+0x2b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_RCC_OscConfig+0x2b8>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe fdc9 	bl	800064c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	e011      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2ce>
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	42470000 	.word	0x42470000
 8001ac8:	42470e80 	.word	0x42470e80
 8001acc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad0:	f7fe fdbc 	bl	800064c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0fd      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b81      	ldr	r3, [pc, #516]	; (8001ce8 <HAL_RCC_OscConfig+0x4d4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d106      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
 8001af6:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a7c      	ldr	r2, [pc, #496]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	e01c      	b.n	8001b3e <HAL_RCC_OscConfig+0x32a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d10c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x312>
 8001b0c:	4b77      	ldr	r3, [pc, #476]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a76      	ldr	r2, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	4b74      	ldr	r3, [pc, #464]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a73      	ldr	r2, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	e00b      	b.n	8001b3e <HAL_RCC_OscConfig+0x32a>
 8001b26:	4b71      	ldr	r3, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a70      	ldr	r2, [pc, #448]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	4b6e      	ldr	r3, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a6d      	ldr	r2, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d015      	beq.n	8001b72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7fe fd81 	bl	800064c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7fe fd7d 	bl	800064c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0bc      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ee      	beq.n	8001b4e <HAL_RCC_OscConfig+0x33a>
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7fe fd6b 	bl	800064c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7fe fd67 	bl	800064c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0a6      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b90:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ee      	bne.n	8001b7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d105      	bne.n	8001bae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8092 	beq.w	8001cdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d05c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d141      	bne.n	8001c50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe fd3b 	bl	800064c <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7fe fd37 	bl	800064c <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e078      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	019b      	lsls	r3, r3, #6
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	061b      	lsls	r3, r3, #24
 8001c1c:	4933      	ldr	r1, [pc, #204]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fd10 	bl	800064c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fd0c 	bl	800064c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04d      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x41c>
 8001c4e:	e045      	b.n	8001cdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe fcf9 	bl	800064c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fcf5 	bl	800064c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e036      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x44a>
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e029      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d115      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470060 	.word	0x42470060

08001cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0cc      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d90c      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0b8      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	494d      	ldr	r1, [pc, #308]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d044      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d119      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e07f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e067      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4934      	ldr	r1, [pc, #208]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7fe fc32 	bl	800064c <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7fe fc2e 	bl	800064c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e04f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d20c      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e032      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4916      	ldr	r1, [pc, #88]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7a:	f000 f821 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8001e7e:	4601      	mov	r1, r0
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	5cd3      	ldrb	r3, [r2, r3]
 8001e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb92 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08007644 	.word	0x08007644
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed6:	4b50      	ldr	r3, [pc, #320]	; (8002018 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x32>
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 808d 	bne.w	8002006 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001eee:	60bb      	str	r3, [r7, #8]
       break;
 8001ef0:	e08c      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef4:	60bb      	str	r3, [r7, #8]
      break;
 8001ef6:	e089      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_GetSysClockFreq+0x158>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d023      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	f04f 0400 	mov.w	r4, #0
 8001f18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	ea03 0501 	and.w	r5, r3, r1
 8001f24:	ea04 0602 	and.w	r6, r4, r2
 8001f28:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f2a:	fb02 f106 	mul.w	r1, r2, r6
 8001f2e:	2200      	movs	r2, #0
 8001f30:	fb02 f205 	mul.w	r2, r2, r5
 8001f34:	440a      	add	r2, r1
 8001f36:	493a      	ldr	r1, [pc, #232]	; (8002020 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f38:	fba5 0101 	umull	r0, r1, r5, r1
 8001f3c:	1853      	adds	r3, r2, r1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f04f 0400 	mov.w	r4, #0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4623      	mov	r3, r4
 8001f4a:	f7fe f999 	bl	8000280 <__aeabi_uldivmod>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e049      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	f04f 0400 	mov.w	r4, #0
 8001f60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	ea03 0501 	and.w	r5, r3, r1
 8001f6c:	ea04 0602 	and.w	r6, r4, r2
 8001f70:	4629      	mov	r1, r5
 8001f72:	4632      	mov	r2, r6
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	0154      	lsls	r4, r2, #5
 8001f7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f82:	014b      	lsls	r3, r1, #5
 8001f84:	4619      	mov	r1, r3
 8001f86:	4622      	mov	r2, r4
 8001f88:	1b49      	subs	r1, r1, r5
 8001f8a:	eb62 0206 	sbc.w	r2, r2, r6
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	0194      	lsls	r4, r2, #6
 8001f98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f9c:	018b      	lsls	r3, r1, #6
 8001f9e:	1a5b      	subs	r3, r3, r1
 8001fa0:	eb64 0402 	sbc.w	r4, r4, r2
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	00e2      	lsls	r2, r4, #3
 8001fae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fb2:	00d9      	lsls	r1, r3, #3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	195b      	adds	r3, r3, r5
 8001fba:	eb44 0406 	adc.w	r4, r4, r6
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	02a2      	lsls	r2, r4, #10
 8001fc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fcc:	0299      	lsls	r1, r3, #10
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4623      	mov	r3, r4
 8001fe0:	f7fe f94e 	bl	8000280 <__aeabi_uldivmod>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0c1b      	lsrs	r3, r3, #16
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	60bb      	str	r3, [r7, #8]
      break;
 8002004:	e002      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002008:	60bb      	str	r3, [r7, #8]
      break;
 800200a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200c:	68bb      	ldr	r3, [r7, #8]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	017d7840 	.word	0x017d7840

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000008 	.word	0x20000008

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4601      	mov	r1, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4a03      	ldr	r2, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08007654 	.word	0x08007654

08002064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002068:	f7ff ffdc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800206c:	4601      	mov	r1, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4a03      	ldr	r2, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08007654 	.word	0x08007654

0800208c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e056      	b.n	800214c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f004 fa9d 	bl	80065f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	ea42 0103 	orr.w	r1, r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	f003 0104 	and.w	r1, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_SPI_Transmit+0x22>
 8002172:	2302      	movs	r3, #2
 8002174:	e11e      	b.n	80023b4 <HAL_SPI_Transmit+0x260>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800217e:	f7fe fa65 	bl	800064c <HAL_GetTick>
 8002182:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d002      	beq.n	800219a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002194:	2302      	movs	r3, #2
 8002196:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002198:	e103      	b.n	80023a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_SPI_Transmit+0x52>
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021aa:	e0fa      	b.n	80023a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f2:	d107      	bne.n	8002204 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	d007      	beq.n	8002222 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800222a:	d14b      	bne.n	80022c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_SPI_Transmit+0xe6>
 8002234:	8afb      	ldrh	r3, [r7, #22]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d13e      	bne.n	80022b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	1c9a      	adds	r2, r3, #2
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800225e:	e02b      	b.n	80022b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d112      	bne.n	8002294 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	1c9a      	adds	r2, r3, #2
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	86da      	strh	r2, [r3, #54]	; 0x36
 8002292:	e011      	b.n	80022b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002294:	f7fe f9da 	bl	800064c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d803      	bhi.n	80022ac <HAL_SPI_Transmit+0x158>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022aa:	d102      	bne.n	80022b2 <HAL_SPI_Transmit+0x15e>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022b6:	e074      	b.n	80023a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ce      	bne.n	8002260 <HAL_SPI_Transmit+0x10c>
 80022c2:	e04c      	b.n	800235e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_Transmit+0x17e>
 80022cc:	8afb      	ldrh	r3, [r7, #22]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d140      	bne.n	8002354 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022f8:	e02c      	b.n	8002354 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d113      	bne.n	8002330 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	86da      	strh	r2, [r3, #54]	; 0x36
 800232e:	e011      	b.n	8002354 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002330:	f7fe f98c 	bl	800064c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d803      	bhi.n	8002348 <HAL_SPI_Transmit+0x1f4>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002346:	d102      	bne.n	800234e <HAL_SPI_Transmit+0x1fa>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002352:	e026      	b.n	80023a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1cd      	bne.n	80022fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fcc4 	bl	8002cf0 <SPI_EndRxTxTransaction>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	77fb      	strb	r3, [r7, #31]
 800239e:	e000      	b.n	80023a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80023a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d8:	d112      	bne.n	8002400 <HAL_SPI_Receive+0x44>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2204      	movs	r2, #4
 80023e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f8e9 	bl	80025ce <HAL_SPI_TransmitReceive>
 80023fc:	4603      	mov	r3, r0
 80023fe:	e0e2      	b.n	80025c6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_SPI_Receive+0x52>
 800240a:	2302      	movs	r3, #2
 800240c:	e0db      	b.n	80025c6 <HAL_SPI_Receive+0x20a>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002416:	f7fe f919 	bl	800064c <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d002      	beq.n	800242e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800242c:	e0c2      	b.n	80025b4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_SPI_Receive+0x7e>
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800243e:	e0b9      	b.n	80025b4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2204      	movs	r2, #4
 8002444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002486:	d107      	bne.n	8002498 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d007      	beq.n	80024b6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d162      	bne.n	8002584 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024be:	e02e      	b.n	800251e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d115      	bne.n	80024fa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f103 020c 	add.w	r2, r3, #12
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f8:	e011      	b.n	800251e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fa:	f7fe f8a7 	bl	800064c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d803      	bhi.n	8002512 <HAL_SPI_Receive+0x156>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002510:	d102      	bne.n	8002518 <HAL_SPI_Receive+0x15c>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800251c:	e04a      	b.n	80025b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1cb      	bne.n	80024c0 <HAL_SPI_Receive+0x104>
 8002528:	e031      	b.n	800258e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d113      	bne.n	8002560 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	b292      	uxth	r2, r2
 8002544:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	1c9a      	adds	r2, r3, #2
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800255e:	e011      	b.n	8002584 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002560:	f7fe f874 	bl	800064c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d803      	bhi.n	8002578 <HAL_SPI_Receive+0x1bc>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002576:	d102      	bne.n	800257e <HAL_SPI_Receive+0x1c2>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002582:	e017      	b.n	80025b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1cd      	bne.n	800252a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fb46 	bl	8002c24 <SPI_EndRxTransaction>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	75fb      	strb	r3, [r7, #23]
 80025b0:	e000      	b.n	80025b4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80025b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b08c      	sub	sp, #48	; 0x30
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025dc:	2301      	movs	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_SPI_TransmitReceive+0x26>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e18a      	b.n	800290a <HAL_SPI_TransmitReceive+0x33c>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025fc:	f7fe f826 	bl	800064c <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800261a:	2b01      	cmp	r3, #1
 800261c:	d00f      	beq.n	800263e <HAL_SPI_TransmitReceive+0x70>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002624:	d107      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x68>
 800262e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002632:	2b04      	cmp	r3, #4
 8002634:	d003      	beq.n	800263e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800263c:	e15b      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x82>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x82>
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002656:	e14e      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b04      	cmp	r3, #4
 8002662:	d003      	beq.n	800266c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	887a      	ldrh	r2, [r7, #2]
 8002682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d007      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c8:	d178      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_TransmitReceive+0x10a>
 80026d2:	8b7b      	ldrh	r3, [r7, #26]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d166      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	1c9a      	adds	r2, r3, #2
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026fc:	e053      	b.n	80027a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d11b      	bne.n	8002744 <HAL_SPI_TransmitReceive+0x176>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <HAL_SPI_TransmitReceive+0x176>
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d113      	bne.n	8002744 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	1c9a      	adds	r2, r3, #2
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d119      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x1b8>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d014      	beq.n	8002786 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	b292      	uxth	r2, r2
 8002768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002782:	2301      	movs	r3, #1
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002786:	f7fd ff61 	bl	800064c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002792:	429a      	cmp	r2, r3
 8002794:	d807      	bhi.n	80027a6 <HAL_SPI_TransmitReceive+0x1d8>
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d003      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027a4:	e0a7      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1a6      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x130>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1a1      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x130>
 80027ba:	e07c      	b.n	80028b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_SPI_TransmitReceive+0x1fc>
 80027c4:	8b7b      	ldrh	r3, [r7, #26]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d16b      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027f0:	e057      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d11c      	bne.n	800283a <HAL_SPI_TransmitReceive+0x26c>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d017      	beq.n	800283a <HAL_SPI_TransmitReceive+0x26c>
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d114      	bne.n	800283a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d119      	bne.n	800287c <HAL_SPI_TransmitReceive+0x2ae>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d014      	beq.n	800287c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002878:	2301      	movs	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800287c:	f7fd fee6 	bl	800064c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002888:	429a      	cmp	r2, r3
 800288a:	d803      	bhi.n	8002894 <HAL_SPI_TransmitReceive+0x2c6>
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002892:	d102      	bne.n	800289a <HAL_SPI_TransmitReceive+0x2cc>
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028a0:	e029      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1a2      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x224>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d19d      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa18 	bl	8002cf0 <SPI_EndRxTxTransaction>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028d2:	e010      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	e000      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800290a:	4618      	mov	r0, r3
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
    return;
 8002956:	e0d8      	b.n	8002b0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_SPI_IRQHandler+0x66>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	09db      	lsrs	r3, r3, #7
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
    return;
 8002978:	e0c7      	b.n	8002b0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_SPI_IRQHandler+0x8c>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80b5 	beq.w	8002b0a <HAL_SPI_IRQHandler+0x1f6>
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80ae 	beq.w	8002b0a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d023      	beq.n	8002a02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d011      	beq.n	80029ea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	e00b      	b.n	8002a02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
        return;
 8002a00:	e083      	b.n	8002b0a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d014      	beq.n	8002a38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f043 0208 	orr.w	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d050      	beq.n	8002b08 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <HAL_SPI_IRQHandler+0x17e>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d034      	beq.n	8002afc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0203 	bic.w	r2, r2, #3
 8002aa0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d011      	beq.n	8002ace <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_SPI_IRQHandler+0x1fc>)
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fa65 	bl	8000f86 <HAL_DMA_Abort_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <HAL_SPI_IRQHandler+0x1fc>)
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fa4f 	bl	8000f86 <HAL_DMA_Abort_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002afa:	e003      	b.n	8002b04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f809 	bl	8002b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b02:	e000      	b.n	8002b06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002b04:	bf00      	nop
    return;
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
  }
}
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	08002b29 	.word	0x08002b29

08002b14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ffe6 	bl	8002b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b60:	e04c      	b.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b68:	d048      	beq.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b6a:	f7fd fd6f 	bl	800064c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d902      	bls.n	8002b80 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d13d      	bne.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b98:	d111      	bne.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba2:	d004      	beq.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d107      	bne.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d10f      	bne.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e00f      	b.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d1a3      	bne.n	8002b62 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c38:	d111      	bne.n	8002c5e <SPI_EndRxTransaction+0x3a>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d004      	beq.n	8002c4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d107      	bne.n	8002c5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c66:	d12a      	bne.n	8002cbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d012      	beq.n	8002c98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff ff67 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02d      	beq.n	8002ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e026      	b.n	8002ce6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff ff54 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01a      	beq.n	8002ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e013      	b.n	8002ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff ff41 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <SPI_EndRxTxTransaction+0x7c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <SPI_EndRxTxTransaction+0x80>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0d5b      	lsrs	r3, r3, #21
 8002d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1a:	d112      	bne.n	8002d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff12 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e00f      	b.n	8002d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d0f2      	beq.n	8002d42 <SPI_EndRxTxTransaction+0x52>
 8002d5c:	e000      	b.n	8002d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d5e:	bf00      	nop
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	165e9f81 	.word	0x165e9f81

08002d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01d      	b.n	8002dc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f003 fc7c 	bl	8006698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 fd2e 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f92c 	bl	800403c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_TIM_OC_Start+0x74>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_TIM_OC_Start+0x2c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_TIM_OC_Start+0x78>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_TIM_OC_Start+0x30>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_TIM_OC_Start+0x32>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b06      	cmp	r3, #6
 8002e22:	d007      	beq.n	8002e34 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40010400 	.word	0x40010400

08002e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e01d      	b.n	8002e96 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f815 	bl	8002e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f000 fcc4 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f8b8 	bl	800403c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_TIM_PWM_Start+0x74>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0x2c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_TIM_PWM_Start+0x78>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x30>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b06      	cmp	r3, #6
 8002f0a:	d007      	beq.n	8002f1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40010400 	.word	0x40010400

08002f30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e01d      	b.n	8002f7e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f003 fc42 	bl	80067e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fc50 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e083      	b.n	80030a2 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f87b 	bl	80030aa <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fca:	f023 0307 	bic.w	r3, r3, #7
 8002fce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f000 fc1a 	bl	8003814 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	4313      	orrs	r3, r2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003026:	f023 030c 	bic.w	r3, r3, #12
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	4313      	orrs	r3, r2
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	4313      	orrs	r3, r2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003064:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800306c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	4313      	orrs	r3, r2
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_TIM_Encoder_Start_IT+0x16>
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d010      	beq.n	80030f4 <HAL_TIM_Encoder_Start_IT+0x36>
 80030d2:	e01f      	b.n	8003114 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 ffad 	bl	800403c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0202 	orr.w	r2, r2, #2
 80030f0:	60da      	str	r2, [r3, #12]
      break;
 80030f2:	e02e      	b.n	8003152 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	2104      	movs	r1, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 ff9d 	bl	800403c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0204 	orr.w	r2, r2, #4
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e01e      	b.n	8003152 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f000 ff8d 	bl	800403c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	2104      	movs	r1, #4
 800312a:	4618      	mov	r0, r3
 800312c:	f000 ff86 	bl	800403c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0202 	orr.w	r2, r2, #2
 800313e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0204 	orr.w	r2, r2, #4
 800314e:	60da      	str	r2, [r3, #12]
      break;
 8003150:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0202 	mvn.w	r2, #2
 8003198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fb11 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fb03 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fb14 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0204 	mvn.w	r2, #4
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fae7 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fad9 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 faea 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b08      	cmp	r3, #8
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0208 	mvn.w	r2, #8
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fabd 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 faaf 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fac0 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d122      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d11b      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2208      	movs	r2, #8
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa93 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fa85 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fa96 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0201 	mvn.w	r2, #1
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa5f 	bl	80037ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 ff8e 	bl	8004238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa5b 	bl	80037fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b20      	cmp	r3, #32
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0220 	mvn.w	r2, #32
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 ff58 	bl	8004224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003392:	2302      	movs	r3, #2
 8003394:	e08a      	b.n	80034ac <HAL_TIM_IC_ConfigChannel+0x130>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d11b      	bne.n	80033e4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f000 fc7a 	bl	8003cb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020c 	bic.w	r2, r2, #12
 80033ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6999      	ldr	r1, [r3, #24]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	619a      	str	r2, [r3, #24]
 80033e2:	e05a      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d11c      	bne.n	8003424 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f000 fcfe 	bl	8003dfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800340c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6999      	ldr	r1, [r3, #24]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	619a      	str	r2, [r3, #24]
 8003422:	e03a      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11b      	bne.n	8003462 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f000 fd4b 	bl	8003ed4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 020c 	bic.w	r2, r2, #12
 800344c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
 8003460:	e01b      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6819      	ldr	r1, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f000 fd6b 	bl	8003f4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003484:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	021a      	lsls	r2, r3, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0b4      	b.n	8003638 <HAL_TIM_PWM_ConfigChannel+0x184>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	f200 809f 	bhi.w	8003624 <HAL_TIM_PWM_ConfigChannel+0x170>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	08003521 	.word	0x08003521
 80034f0:	08003625 	.word	0x08003625
 80034f4:	08003625 	.word	0x08003625
 80034f8:	08003625 	.word	0x08003625
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003625 	.word	0x08003625
 8003504:	08003625 	.word	0x08003625
 8003508:	08003625 	.word	0x08003625
 800350c:	080035a3 	.word	0x080035a3
 8003510:	08003625 	.word	0x08003625
 8003514:	08003625 	.word	0x08003625
 8003518:	08003625 	.word	0x08003625
 800351c:	080035e3 	.word	0x080035e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa14 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6999      	ldr	r1, [r3, #24]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	619a      	str	r2, [r3, #24]
      break;
 800355e:	e062      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fa64 	bl	8003a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	021a      	lsls	r2, r3, #8
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	619a      	str	r2, [r3, #24]
      break;
 80035a0:	e041      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fab9 	bl	8003b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0208 	orr.w	r2, r2, #8
 80035bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0204 	bic.w	r2, r2, #4
 80035cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	61da      	str	r2, [r3, #28]
      break;
 80035e0:	e021      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb0d 	bl	8003c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69d9      	ldr	r1, [r3, #28]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	021a      	lsls	r2, r3, #8
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	61da      	str	r2, [r3, #28]
      break;
 8003622:	e000      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003624:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIM_ConfigClockSource+0x18>
 8003654:	2302      	movs	r3, #2
 8003656:	e0a6      	b.n	80037a6 <HAL_TIM_ConfigClockSource+0x166>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d067      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0x120>
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d80b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x6c>
 8003694:	2b10      	cmp	r3, #16
 8003696:	d073      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x140>
 8003698:	2b10      	cmp	r3, #16
 800369a:	d802      	bhi.n	80036a2 <HAL_TIM_ConfigClockSource+0x62>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d06f      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036a0:	e078      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d06c      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x140>
 80036a6:	2b30      	cmp	r3, #48	; 0x30
 80036a8:	d06a      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036aa:	e073      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d00d      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x8c>
 80036b0:	2b70      	cmp	r3, #112	; 0x70
 80036b2:	d804      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x7e>
 80036b4:	2b50      	cmp	r3, #80	; 0x50
 80036b6:	d033      	beq.n	8003720 <HAL_TIM_ConfigClockSource+0xe0>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d041      	beq.n	8003740 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036bc:	e06a      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c2:	d066      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x152>
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d017      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036ca:	e063      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f000 fc8e 	bl	8003ffc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e04c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f000 fc77 	bl	8003ffc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371c:	609a      	str	r2, [r3, #8]
      break;
 800371e:	e039      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	461a      	mov	r2, r3
 800372e:	f000 fb35 	bl	8003d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2150      	movs	r1, #80	; 0x50
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fc44 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 800373e:	e029      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	461a      	mov	r2, r3
 800374e:	f000 fb91 	bl	8003e74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2160      	movs	r1, #96	; 0x60
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fc34 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 800375e:	e019      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	461a      	mov	r2, r3
 800376e:	f000 fb15 	bl	8003d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2140      	movs	r1, #64	; 0x40
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fc24 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 800377e:	e009      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 fc1b 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003790:	e000      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a40      	ldr	r2, [pc, #256]	; (8003928 <TIM_Base_SetConfig+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3d      	ldr	r2, [pc, #244]	; (800392c <TIM_Base_SetConfig+0x118>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3c      	ldr	r2, [pc, #240]	; (8003930 <TIM_Base_SetConfig+0x11c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <TIM_Base_SetConfig+0x120>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3a      	ldr	r2, [pc, #232]	; (8003938 <TIM_Base_SetConfig+0x124>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <TIM_Base_SetConfig+0x114>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02b      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d027      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2c      	ldr	r2, [pc, #176]	; (800392c <TIM_Base_SetConfig+0x118>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d023      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <TIM_Base_SetConfig+0x11c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01f      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <TIM_Base_SetConfig+0x120>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01b      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_Base_SetConfig+0x124>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d017      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <TIM_Base_SetConfig+0x128>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a27      	ldr	r2, [pc, #156]	; (8003940 <TIM_Base_SetConfig+0x12c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <TIM_Base_SetConfig+0x130>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a25      	ldr	r2, [pc, #148]	; (8003948 <TIM_Base_SetConfig+0x134>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a24      	ldr	r2, [pc, #144]	; (800394c <TIM_Base_SetConfig+0x138>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a23      	ldr	r2, [pc, #140]	; (8003950 <TIM_Base_SetConfig+0x13c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <TIM_Base_SetConfig+0x114>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_Base_SetConfig+0xf8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <TIM_Base_SetConfig+0x124>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	615a      	str	r2, [r3, #20]
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40010400 	.word	0x40010400
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	40001800 	.word	0x40001800
 800394c:	40001c00 	.word	0x40001c00
 8003950:	40002000 	.word	0x40002000

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0302 	bic.w	r3, r3, #2
 800399c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <TIM_OC1_SetConfig+0xd8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC1_SetConfig+0x64>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <TIM_OC1_SetConfig+0xdc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10c      	bne.n	80039d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0308 	bic.w	r3, r3, #8
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <TIM_OC1_SetConfig+0xd8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC1_SetConfig+0x8e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <TIM_OC1_SetConfig+0xdc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40010400 	.word	0x40010400

08003a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0210 	bic.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0320 	bic.w	r3, r3, #32
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a22      	ldr	r2, [pc, #136]	; (8003b18 <TIM_OC2_SetConfig+0xe4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_OC2_SetConfig+0x68>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <TIM_OC2_SetConfig+0xe8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10d      	bne.n	8003ab8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <TIM_OC2_SetConfig+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_OC2_SetConfig+0x94>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <TIM_OC2_SetConfig+0xe8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d113      	bne.n	8003af0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40010400 	.word	0x40010400

08003b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_OC3_SetConfig+0xe0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_OC3_SetConfig+0x66>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <TIM_OC3_SetConfig+0xe4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10d      	bne.n	8003ba2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <TIM_OC3_SetConfig+0xe0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_OC3_SetConfig+0x92>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <TIM_OC3_SetConfig+0xe4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d113      	bne.n	8003bda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	621a      	str	r2, [r3, #32]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40010400 	.word	0x40010400

08003c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <TIM_OC4_SetConfig+0xa4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_OC4_SetConfig+0x68>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a11      	ldr	r2, [pc, #68]	; (8003cb0 <TIM_OC4_SetConfig+0xa8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d109      	bne.n	8003c84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <TIM_TI1_SetConfig+0xcc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01b      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d017      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_TI1_SetConfig+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <TIM_TI1_SetConfig+0xd4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00f      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <TIM_TI1_SetConfig+0xd8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <TIM_TI1_SetConfig+0xdc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_TI1_SetConfig+0xe0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_TI1_SetConfig+0x66>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <TIM_TI1_SetConfig+0xe4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <TIM_TI1_SetConfig+0x6a>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <TIM_TI1_SetConfig+0x6c>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e003      	b.n	8003d3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f023 030a 	bic.w	r3, r3, #10
 8003d58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f003 030a 	and.w	r3, r3, #10
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40001800 	.word	0x40001800

08003d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 030a 	bic.w	r3, r3, #10
 8003dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b087      	sub	sp, #28
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0210 	bic.w	r2, r3, #16
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	621a      	str	r2, [r3, #32]
}
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 0303 	bic.w	r3, r3, #3
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	031b      	lsls	r3, r3, #12
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	031b      	lsls	r3, r3, #12
 8003fa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f043 0307 	orr.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	431a      	orrs	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2201      	movs	r2, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800409c:	2302      	movs	r3, #2
 800409e:	e05a      	b.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d01d      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1b      	ldr	r2, [pc, #108]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10c      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4313      	orrs	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40001800 	.word	0x40001800

08004180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004198:	2302      	movs	r3, #2
 800419a:	e03d      	b.n	8004218 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e03f      	b.n	80042de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f002 fb7c 	bl	8006970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fba1 	bl	80049d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b088      	sub	sp, #32
 80042ea:	af02      	add	r7, sp, #8
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b20      	cmp	r3, #32
 8004304:	f040 8083 	bne.w	800440e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_UART_Transmit+0x2e>
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e07b      	b.n	8004410 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_UART_Transmit+0x40>
 8004322:	2302      	movs	r3, #2
 8004324:	e074      	b.n	8004410 <HAL_UART_Transmit+0x12a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2221      	movs	r2, #33	; 0x21
 8004338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800433c:	f7fc f986 	bl	800064c <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004356:	e042      	b.n	80043de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d122      	bne.n	80043b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f9c0 	bl	8004700 <UART_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e042      	b.n	8004410 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3302      	adds	r3, #2
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	e017      	b.n	80043de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3301      	adds	r3, #1
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	e013      	b.n	80043de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f99d 	bl	8004700 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e01f      	b.n	8004410 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	60ba      	str	r2, [r7, #8]
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1b7      	bne.n	8004358 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	2140      	movs	r1, #64	; 0x40
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f984 	bl	8004700 <UART_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e006      	b.n	8004410 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b20      	cmp	r3, #32
 8004430:	d140      	bne.n	80044b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_Receive_IT+0x26>
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e039      	b.n	80044b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UART_Receive_IT+0x38>
 800444c:	2302      	movs	r3, #2
 800444e:	e032      	b.n	80044b6 <HAL_UART_Receive_IT+0x9e>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2222      	movs	r2, #34	; 0x22
 8004474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0220 	orr.w	r2, r2, #32
 80044ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_UART_IRQHandler+0x52>
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9e0 	bl	80048d4 <UART_Receive_IT>
      return;
 8004514:	e0d1      	b.n	80046ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80b0 	beq.w	800467e <HAL_UART_IRQHandler+0x1ba>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_UART_IRQHandler+0x70>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a5 	beq.w	800467e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_UART_IRQHandler+0x90>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_UART_IRQHandler+0xb0>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	f043 0202 	orr.w	r2, r3, #2
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_UART_IRQHandler+0xd0>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00f      	beq.n	80045be <HAL_UART_IRQHandler+0xfa>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_UART_IRQHandler+0xee>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	f043 0208 	orr.w	r2, r3, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d078      	beq.n	80046b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_UART_IRQHandler+0x11c>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f97a 	bl	80048d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_UART_IRQHandler+0x144>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d031      	beq.n	800466c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f8c3 	bl	8004794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d123      	bne.n	8004664 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	4a21      	ldr	r2, [pc, #132]	; (80046c0 <HAL_UART_IRQHandler+0x1fc>)
 800463a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4618      	mov	r0, r3
 8004642:	f7fc fca0 	bl	8000f86 <HAL_DMA_Abort_IT>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d016      	beq.n	800467a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004656:	4610      	mov	r0, r2
 8004658:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465a:	e00e      	b.n	800467a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f845 	bl	80046ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004662:	e00a      	b.n	800467a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f841 	bl	80046ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	e006      	b.n	800467a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f83d 	bl	80046ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004678:	e01e      	b.n	80046b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467a:	bf00      	nop
    return;
 800467c:	e01c      	b.n	80046b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x1d6>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8b0 	bl	80047f8 <UART_Transmit_IT>
    return;
 8004698:	e00f      	b.n	80046ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_UART_IRQHandler+0x1f6>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f8f8 	bl	80048a4 <UART_EndTransmit_IT>
    return;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80046b8:	bf00      	nop
  }
}
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080047d1 	.word	0x080047d1

080046c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004710:	e02c      	b.n	800476c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004718:	d028      	beq.n	800476c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0x30>
 8004720:	f7fb ff94 	bl	800064c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	429a      	cmp	r2, r3
 800472e:	d21d      	bcs.n	800476c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800473e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e00f      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	429a      	cmp	r2, r3
 8004788:	d0c3      	beq.n	8004712 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff7e 	bl	80046ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b21      	cmp	r3, #33	; 0x21
 800480a:	d144      	bne.n	8004896 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d11a      	bne.n	800484c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	1c9a      	adds	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]
 800483e:	e00e      	b.n	800485e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]
 800484a:	e008      	b.n	800485e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	1c59      	adds	r1, r3, #1
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6211      	str	r1, [r2, #32]
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	4619      	mov	r1, r3
 800486c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004880:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004890:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fefd 	bl	80046c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b22      	cmp	r3, #34	; 0x22
 80048e6:	d171      	bne.n	80049cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d123      	bne.n	800493a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10e      	bne.n	800491e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
 800491c:	e029      	b.n	8004972 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	b29b      	uxth	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
 8004938:	e01b      	b.n	8004972 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6858      	ldr	r0, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6291      	str	r1, [r2, #40]	; 0x28
 8004952:	b2c2      	uxtb	r2, r0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e00c      	b.n	8004972 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	1c58      	adds	r0, r3, #1
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	6288      	str	r0, [r1, #40]	; 0x28
 800496a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4619      	mov	r1, r3
 8004980:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004982:	2b00      	cmp	r3, #0
 8004984:	d120      	bne.n	80049c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0220 	bic.w	r2, r2, #32
 8004994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fe8a 	bl	80046d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e002      	b.n	80049ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a1a:	f023 030c 	bic.w	r3, r3, #12
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	430b      	orrs	r3, r1
 8004a26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	f040 818b 	bne.w	8004d60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4ac1      	ldr	r2, [pc, #772]	; (8004d54 <UART_SetConfig+0x37c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d005      	beq.n	8004a60 <UART_SetConfig+0x88>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4abf      	ldr	r2, [pc, #764]	; (8004d58 <UART_SetConfig+0x380>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	f040 80bd 	bne.w	8004bda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a60:	f7fd fb00 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8004a64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	461d      	mov	r5, r3
 8004a6a:	f04f 0600 	mov.w	r6, #0
 8004a6e:	46a8      	mov	r8, r5
 8004a70:	46b1      	mov	r9, r6
 8004a72:	eb18 0308 	adds.w	r3, r8, r8
 8004a76:	eb49 0409 	adc.w	r4, r9, r9
 8004a7a:	4698      	mov	r8, r3
 8004a7c:	46a1      	mov	r9, r4
 8004a7e:	eb18 0805 	adds.w	r8, r8, r5
 8004a82:	eb49 0906 	adc.w	r9, r9, r6
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a9a:	4688      	mov	r8, r1
 8004a9c:	4691      	mov	r9, r2
 8004a9e:	eb18 0005 	adds.w	r0, r8, r5
 8004aa2:	eb49 0106 	adc.w	r1, r9, r6
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	461d      	mov	r5, r3
 8004aac:	f04f 0600 	mov.w	r6, #0
 8004ab0:	196b      	adds	r3, r5, r5
 8004ab2:	eb46 0406 	adc.w	r4, r6, r6
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	4623      	mov	r3, r4
 8004aba:	f7fb fbe1 	bl	8000280 <__aeabi_uldivmod>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4ba5      	ldr	r3, [pc, #660]	; (8004d5c <UART_SetConfig+0x384>)
 8004ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	f04f 0600 	mov.w	r6, #0
 8004ad8:	46a9      	mov	r9, r5
 8004ada:	46b2      	mov	sl, r6
 8004adc:	eb19 0309 	adds.w	r3, r9, r9
 8004ae0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ae4:	4699      	mov	r9, r3
 8004ae6:	46a2      	mov	sl, r4
 8004ae8:	eb19 0905 	adds.w	r9, r9, r5
 8004aec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004afc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b04:	4689      	mov	r9, r1
 8004b06:	4692      	mov	sl, r2
 8004b08:	eb19 0005 	adds.w	r0, r9, r5
 8004b0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	461d      	mov	r5, r3
 8004b16:	f04f 0600 	mov.w	r6, #0
 8004b1a:	196b      	adds	r3, r5, r5
 8004b1c:	eb46 0406 	adc.w	r4, r6, r6
 8004b20:	461a      	mov	r2, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	f7fb fbac 	bl	8000280 <__aeabi_uldivmod>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b8b      	ldr	r3, [pc, #556]	; (8004d5c <UART_SetConfig+0x384>)
 8004b30:	fba3 1302 	umull	r1, r3, r3, r2
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2164      	movs	r1, #100	; 0x64
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	4a86      	ldr	r2, [pc, #536]	; (8004d5c <UART_SetConfig+0x384>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b50:	4498      	add	r8, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	461d      	mov	r5, r3
 8004b56:	f04f 0600 	mov.w	r6, #0
 8004b5a:	46a9      	mov	r9, r5
 8004b5c:	46b2      	mov	sl, r6
 8004b5e:	eb19 0309 	adds.w	r3, r9, r9
 8004b62:	eb4a 040a 	adc.w	r4, sl, sl
 8004b66:	4699      	mov	r9, r3
 8004b68:	46a2      	mov	sl, r4
 8004b6a:	eb19 0905 	adds.w	r9, r9, r5
 8004b6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b86:	4689      	mov	r9, r1
 8004b88:	4692      	mov	sl, r2
 8004b8a:	eb19 0005 	adds.w	r0, r9, r5
 8004b8e:	eb4a 0106 	adc.w	r1, sl, r6
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	461d      	mov	r5, r3
 8004b98:	f04f 0600 	mov.w	r6, #0
 8004b9c:	196b      	adds	r3, r5, r5
 8004b9e:	eb46 0406 	adc.w	r4, r6, r6
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	f7fb fb6b 	bl	8000280 <__aeabi_uldivmod>
 8004baa:	4603      	mov	r3, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4b6a      	ldr	r3, [pc, #424]	; (8004d5c <UART_SetConfig+0x384>)
 8004bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2164      	movs	r1, #100	; 0x64
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	3332      	adds	r3, #50	; 0x32
 8004bc4:	4a65      	ldr	r2, [pc, #404]	; (8004d5c <UART_SetConfig+0x384>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	f003 0207 	and.w	r2, r3, #7
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4442      	add	r2, r8
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	e26f      	b.n	80050ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fd fa2f 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8004bde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	461d      	mov	r5, r3
 8004be4:	f04f 0600 	mov.w	r6, #0
 8004be8:	46a8      	mov	r8, r5
 8004bea:	46b1      	mov	r9, r6
 8004bec:	eb18 0308 	adds.w	r3, r8, r8
 8004bf0:	eb49 0409 	adc.w	r4, r9, r9
 8004bf4:	4698      	mov	r8, r3
 8004bf6:	46a1      	mov	r9, r4
 8004bf8:	eb18 0805 	adds.w	r8, r8, r5
 8004bfc:	eb49 0906 	adc.w	r9, r9, r6
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c14:	4688      	mov	r8, r1
 8004c16:	4691      	mov	r9, r2
 8004c18:	eb18 0005 	adds.w	r0, r8, r5
 8004c1c:	eb49 0106 	adc.w	r1, r9, r6
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	461d      	mov	r5, r3
 8004c26:	f04f 0600 	mov.w	r6, #0
 8004c2a:	196b      	adds	r3, r5, r5
 8004c2c:	eb46 0406 	adc.w	r4, r6, r6
 8004c30:	461a      	mov	r2, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	f7fb fb24 	bl	8000280 <__aeabi_uldivmod>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <UART_SetConfig+0x384>)
 8004c40:	fba3 2302 	umull	r2, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	461d      	mov	r5, r3
 8004c4e:	f04f 0600 	mov.w	r6, #0
 8004c52:	46a9      	mov	r9, r5
 8004c54:	46b2      	mov	sl, r6
 8004c56:	eb19 0309 	adds.w	r3, r9, r9
 8004c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c5e:	4699      	mov	r9, r3
 8004c60:	46a2      	mov	sl, r4
 8004c62:	eb19 0905 	adds.w	r9, r9, r5
 8004c66:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c7e:	4689      	mov	r9, r1
 8004c80:	4692      	mov	sl, r2
 8004c82:	eb19 0005 	adds.w	r0, r9, r5
 8004c86:	eb4a 0106 	adc.w	r1, sl, r6
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	461d      	mov	r5, r3
 8004c90:	f04f 0600 	mov.w	r6, #0
 8004c94:	196b      	adds	r3, r5, r5
 8004c96:	eb46 0406 	adc.w	r4, r6, r6
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	f7fb faef 	bl	8000280 <__aeabi_uldivmod>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <UART_SetConfig+0x384>)
 8004caa:	fba3 1302 	umull	r1, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2164      	movs	r1, #100	; 0x64
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	3332      	adds	r3, #50	; 0x32
 8004cbc:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <UART_SetConfig+0x384>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cca:	4498      	add	r8, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	461d      	mov	r5, r3
 8004cd0:	f04f 0600 	mov.w	r6, #0
 8004cd4:	46a9      	mov	r9, r5
 8004cd6:	46b2      	mov	sl, r6
 8004cd8:	eb19 0309 	adds.w	r3, r9, r9
 8004cdc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ce0:	4699      	mov	r9, r3
 8004ce2:	46a2      	mov	sl, r4
 8004ce4:	eb19 0905 	adds.w	r9, r9, r5
 8004ce8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d00:	4689      	mov	r9, r1
 8004d02:	4692      	mov	sl, r2
 8004d04:	eb19 0005 	adds.w	r0, r9, r5
 8004d08:	eb4a 0106 	adc.w	r1, sl, r6
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	461d      	mov	r5, r3
 8004d12:	f04f 0600 	mov.w	r6, #0
 8004d16:	196b      	adds	r3, r5, r5
 8004d18:	eb46 0406 	adc.w	r4, r6, r6
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4623      	mov	r3, r4
 8004d20:	f7fb faae 	bl	8000280 <__aeabi_uldivmod>
 8004d24:	4603      	mov	r3, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <UART_SetConfig+0x384>)
 8004d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	2164      	movs	r1, #100	; 0x64
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	3332      	adds	r3, #50	; 0x32
 8004d3e:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <UART_SetConfig+0x384>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f003 0207 	and.w	r2, r3, #7
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4442      	add	r2, r8
 8004d50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004d52:	e1b2      	b.n	80050ba <UART_SetConfig+0x6e2>
 8004d54:	40011000 	.word	0x40011000
 8004d58:	40011400 	.word	0x40011400
 8004d5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4ad7      	ldr	r2, [pc, #860]	; (80050c4 <UART_SetConfig+0x6ec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d005      	beq.n	8004d76 <UART_SetConfig+0x39e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4ad6      	ldr	r2, [pc, #856]	; (80050c8 <UART_SetConfig+0x6f0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f040 80d1 	bne.w	8004f18 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d76:	f7fd f975 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8004d7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	469a      	mov	sl, r3
 8004d80:	f04f 0b00 	mov.w	fp, #0
 8004d84:	46d0      	mov	r8, sl
 8004d86:	46d9      	mov	r9, fp
 8004d88:	eb18 0308 	adds.w	r3, r8, r8
 8004d8c:	eb49 0409 	adc.w	r4, r9, r9
 8004d90:	4698      	mov	r8, r3
 8004d92:	46a1      	mov	r9, r4
 8004d94:	eb18 080a 	adds.w	r8, r8, sl
 8004d98:	eb49 090b 	adc.w	r9, r9, fp
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004da8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004dac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004db0:	4688      	mov	r8, r1
 8004db2:	4691      	mov	r9, r2
 8004db4:	eb1a 0508 	adds.w	r5, sl, r8
 8004db8:	eb4b 0609 	adc.w	r6, fp, r9
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f04f 0400 	mov.w	r4, #0
 8004dce:	0094      	lsls	r4, r2, #2
 8004dd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dd4:	008b      	lsls	r3, r1, #2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4623      	mov	r3, r4
 8004dda:	4628      	mov	r0, r5
 8004ddc:	4631      	mov	r1, r6
 8004dde:	f7fb fa4f 	bl	8000280 <__aeabi_uldivmod>
 8004de2:	4603      	mov	r3, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	461a      	mov	r2, r3
 8004de8:	4bb8      	ldr	r3, [pc, #736]	; (80050cc <UART_SetConfig+0x6f4>)
 8004dea:	fba3 2302 	umull	r2, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	469b      	mov	fp, r3
 8004df8:	f04f 0c00 	mov.w	ip, #0
 8004dfc:	46d9      	mov	r9, fp
 8004dfe:	46e2      	mov	sl, ip
 8004e00:	eb19 0309 	adds.w	r3, r9, r9
 8004e04:	eb4a 040a 	adc.w	r4, sl, sl
 8004e08:	4699      	mov	r9, r3
 8004e0a:	46a2      	mov	sl, r4
 8004e0c:	eb19 090b 	adds.w	r9, r9, fp
 8004e10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e28:	4689      	mov	r9, r1
 8004e2a:	4692      	mov	sl, r2
 8004e2c:	eb1b 0509 	adds.w	r5, fp, r9
 8004e30:	eb4c 060a 	adc.w	r6, ip, sl
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	f04f 0400 	mov.w	r4, #0
 8004e46:	0094      	lsls	r4, r2, #2
 8004e48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e4c:	008b      	lsls	r3, r1, #2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4623      	mov	r3, r4
 8004e52:	4628      	mov	r0, r5
 8004e54:	4631      	mov	r1, r6
 8004e56:	f7fb fa13 	bl	8000280 <__aeabi_uldivmod>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4b9a      	ldr	r3, [pc, #616]	; (80050cc <UART_SetConfig+0x6f4>)
 8004e62:	fba3 1302 	umull	r1, r3, r3, r2
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2164      	movs	r1, #100	; 0x64
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	3332      	adds	r3, #50	; 0x32
 8004e74:	4a95      	ldr	r2, [pc, #596]	; (80050cc <UART_SetConfig+0x6f4>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e80:	4498      	add	r8, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	469b      	mov	fp, r3
 8004e86:	f04f 0c00 	mov.w	ip, #0
 8004e8a:	46d9      	mov	r9, fp
 8004e8c:	46e2      	mov	sl, ip
 8004e8e:	eb19 0309 	adds.w	r3, r9, r9
 8004e92:	eb4a 040a 	adc.w	r4, sl, sl
 8004e96:	4699      	mov	r9, r3
 8004e98:	46a2      	mov	sl, r4
 8004e9a:	eb19 090b 	adds.w	r9, r9, fp
 8004e9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ea2:	f04f 0100 	mov.w	r1, #0
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004eb6:	4689      	mov	r9, r1
 8004eb8:	4692      	mov	sl, r2
 8004eba:	eb1b 0509 	adds.w	r5, fp, r9
 8004ebe:	eb4c 060a 	adc.w	r6, ip, sl
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	f04f 0400 	mov.w	r4, #0
 8004ed4:	0094      	lsls	r4, r2, #2
 8004ed6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eda:	008b      	lsls	r3, r1, #2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	f7fb f9cc 	bl	8000280 <__aeabi_uldivmod>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b77      	ldr	r3, [pc, #476]	; (80050cc <UART_SetConfig+0x6f4>)
 8004ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2164      	movs	r1, #100	; 0x64
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a72      	ldr	r2, [pc, #456]	; (80050cc <UART_SetConfig+0x6f4>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4442      	add	r2, r8
 8004f14:	609a      	str	r2, [r3, #8]
 8004f16:	e0d0      	b.n	80050ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fd f890 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8004f1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	469a      	mov	sl, r3
 8004f22:	f04f 0b00 	mov.w	fp, #0
 8004f26:	46d0      	mov	r8, sl
 8004f28:	46d9      	mov	r9, fp
 8004f2a:	eb18 0308 	adds.w	r3, r8, r8
 8004f2e:	eb49 0409 	adc.w	r4, r9, r9
 8004f32:	4698      	mov	r8, r3
 8004f34:	46a1      	mov	r9, r4
 8004f36:	eb18 080a 	adds.w	r8, r8, sl
 8004f3a:	eb49 090b 	adc.w	r9, r9, fp
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f52:	4688      	mov	r8, r1
 8004f54:	4691      	mov	r9, r2
 8004f56:	eb1a 0508 	adds.w	r5, sl, r8
 8004f5a:	eb4b 0609 	adc.w	r6, fp, r9
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4619      	mov	r1, r3
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	0094      	lsls	r4, r2, #2
 8004f72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f76:	008b      	lsls	r3, r1, #2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	4631      	mov	r1, r6
 8004f80:	f7fb f97e 	bl	8000280 <__aeabi_uldivmod>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b50      	ldr	r3, [pc, #320]	; (80050cc <UART_SetConfig+0x6f4>)
 8004f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	469b      	mov	fp, r3
 8004f9a:	f04f 0c00 	mov.w	ip, #0
 8004f9e:	46d9      	mov	r9, fp
 8004fa0:	46e2      	mov	sl, ip
 8004fa2:	eb19 0309 	adds.w	r3, r9, r9
 8004fa6:	eb4a 040a 	adc.w	r4, sl, sl
 8004faa:	4699      	mov	r9, r3
 8004fac:	46a2      	mov	sl, r4
 8004fae:	eb19 090b 	adds.w	r9, r9, fp
 8004fb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fca:	4689      	mov	r9, r1
 8004fcc:	4692      	mov	sl, r2
 8004fce:	eb1b 0509 	adds.w	r5, fp, r9
 8004fd2:	eb4c 060a 	adc.w	r6, ip, sl
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	f04f 0400 	mov.w	r4, #0
 8004fe8:	0094      	lsls	r4, r2, #2
 8004fea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	f7fb f942 	bl	8000280 <__aeabi_uldivmod>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	461a      	mov	r2, r3
 8005002:	4b32      	ldr	r3, [pc, #200]	; (80050cc <UART_SetConfig+0x6f4>)
 8005004:	fba3 1302 	umull	r1, r3, r3, r2
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	2164      	movs	r1, #100	; 0x64
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	3332      	adds	r3, #50	; 0x32
 8005016:	4a2d      	ldr	r2, [pc, #180]	; (80050cc <UART_SetConfig+0x6f4>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005022:	4498      	add	r8, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	469b      	mov	fp, r3
 8005028:	f04f 0c00 	mov.w	ip, #0
 800502c:	46d9      	mov	r9, fp
 800502e:	46e2      	mov	sl, ip
 8005030:	eb19 0309 	adds.w	r3, r9, r9
 8005034:	eb4a 040a 	adc.w	r4, sl, sl
 8005038:	4699      	mov	r9, r3
 800503a:	46a2      	mov	sl, r4
 800503c:	eb19 090b 	adds.w	r9, r9, fp
 8005040:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005050:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005058:	4689      	mov	r9, r1
 800505a:	4692      	mov	sl, r2
 800505c:	eb1b 0509 	adds.w	r5, fp, r9
 8005060:	eb4c 060a 	adc.w	r6, ip, sl
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4619      	mov	r1, r3
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	f04f 0400 	mov.w	r4, #0
 8005076:	0094      	lsls	r4, r2, #2
 8005078:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800507c:	008b      	lsls	r3, r1, #2
 800507e:	461a      	mov	r2, r3
 8005080:	4623      	mov	r3, r4
 8005082:	4628      	mov	r0, r5
 8005084:	4631      	mov	r1, r6
 8005086:	f7fb f8fb 	bl	8000280 <__aeabi_uldivmod>
 800508a:	4603      	mov	r3, r0
 800508c:	460c      	mov	r4, r1
 800508e:	461a      	mov	r2, r3
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <UART_SetConfig+0x6f4>)
 8005092:	fba3 1302 	umull	r1, r3, r3, r2
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2164      	movs	r1, #100	; 0x64
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	3332      	adds	r3, #50	; 0x32
 80050a4:	4a09      	ldr	r2, [pc, #36]	; (80050cc <UART_SetConfig+0x6f4>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	f003 020f 	and.w	r2, r3, #15
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4442      	add	r2, r8
 80050b6:	609a      	str	r2, [r3, #8]
}
 80050b8:	e7ff      	b.n	80050ba <UART_SetConfig+0x6e2>
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c4:	40011000 	.word	0x40011000
 80050c8:	40011400 	.word	0x40011400
 80050cc:	51eb851f 	.word	0x51eb851f

080050d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d0:	b084      	sub	sp, #16
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	f107 001c 	add.w	r0, r7, #28
 80050de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d122      	bne.n	800512e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa5c 	bl	80055e0 <USB_CoreReset>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]
 800512c:	e01a      	b.n	8005164 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa50 	bl	80055e0 <USB_CoreReset>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
 8005156:	e005      	b.n	8005164 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10b      	bne.n	8005182 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f043 0206 	orr.w	r2, r3, #6
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800518e:	b004      	add	sp, #16
 8005190:	4770      	bx	lr

08005192 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 0201 	bic.w	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d106      	bne.n	80051e0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	e00b      	b.n	80051f8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	e001      	b.n	80051f8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e003      	b.n	8005200 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80051f8:	2032      	movs	r0, #50	; 0x32
 80051fa:	f7fb fa33 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005208:	b084      	sub	sp, #16
 800520a:	b580      	push	{r7, lr}
 800520c:	b086      	sub	sp, #24
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e009      	b.n	800523c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3340      	adds	r3, #64	; 0x40
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	2200      	movs	r2, #0
 8005234:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3301      	adds	r3, #1
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0e      	cmp	r3, #14
 8005240:	d9f2      	bls.n	8005228 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d112      	bne.n	800526e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
 800526c:	e00b      	b.n	8005286 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800528c:	461a      	mov	r2, r3
 800528e:	2300      	movs	r3, #0
 8005290:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	4619      	mov	r1, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	461a      	mov	r2, r3
 80052a2:	680b      	ldr	r3, [r1, #0]
 80052a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10c      	bne.n	80052c6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052b2:	2100      	movs	r1, #0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f961 	bl	800557c <USB_SetDevSpeed>
 80052ba:	e008      	b.n	80052ce <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052bc:	2101      	movs	r1, #1
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f95c 	bl	800557c <USB_SetDevSpeed>
 80052c4:	e003      	b.n	80052ce <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052c6:	2103      	movs	r1, #3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f957 	bl	800557c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052ce:	2110      	movs	r1, #16
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f90b 	bl	80054ec <USB_FlushTxFifo>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f929 	bl	8005538 <USB_FlushRxFifo>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	461a      	mov	r2, r3
 8005304:	2300      	movs	r3, #0
 8005306:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	461a      	mov	r2, r3
 8005310:	2300      	movs	r3, #0
 8005312:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	e043      	b.n	80053a2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005330:	d118      	bne.n	8005364 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	461a      	mov	r2, r3
 8005346:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	e013      	b.n	8005376 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	461a      	mov	r2, r3
 800535c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e008      	b.n	8005376 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	2300      	movs	r3, #0
 8005374:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	461a      	mov	r2, r3
 8005384:	2300      	movs	r3, #0
 8005386:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800539a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	3301      	adds	r3, #1
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d3b7      	bcc.n	800531a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e043      	b.n	8005438 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c6:	d118      	bne.n	80053fa <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	461a      	mov	r2, r3
 80053dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e013      	b.n	800540c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	461a      	mov	r2, r3
 80053f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e008      	b.n	800540c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	2300      	movs	r3, #0
 800540a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	2300      	movs	r3, #0
 800541c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	461a      	mov	r2, r3
 800542c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005430:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3301      	adds	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d3b7      	bcc.n	80053b0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005452:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	2b01      	cmp	r3, #1
 8005458:	d111      	bne.n	800547e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	461a      	mov	r2, r3
 8005462:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <USB_DevInit+0x2dc>)
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005478:	f043 0303 	orr.w	r3, r3, #3
 800547c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800548a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d105      	bne.n	800549e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f043 0210 	orr.w	r2, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <USB_DevInit+0x2e0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f043 0208 	orr.w	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d107      	bne.n	80054d2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054de:	b004      	add	sp, #16
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	00800100 	.word	0x00800100
 80054e8:	803c3800 	.word	0x803c3800

080054ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <USB_FlushTxFifo+0x48>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e006      	b.n	8005526 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b20      	cmp	r3, #32
 8005522:	d0f0      	beq.n	8005506 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	00030d40 	.word	0x00030d40

08005538 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2210      	movs	r2, #16
 8005548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <USB_FlushRxFifo+0x40>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b10      	cmp	r3, #16
 8005566:	d0f0      	beq.n	800554a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	00030d40 	.word	0x00030d40

0800557c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c8:	f043 0302 	orr.w	r3, r3, #2
 80055cc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80055ce:	2003      	movs	r0, #3
 80055d0:	f7fb f848 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a13      	ldr	r2, [pc, #76]	; (8005644 <USB_CoreReset+0x64>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e01b      	b.n	8005636 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	daf2      	bge.n	80055ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f043 0201 	orr.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a09      	ldr	r2, [pc, #36]	; (8005644 <USB_CoreReset+0x64>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e006      	b.n	8005636 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d0f0      	beq.n	8005616 <USB_CoreReset+0x36>

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	00030d40 	.word	0x00030d40

08005648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b095      	sub	sp, #84	; 0x54
 800564c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800564e:	f7fa ff97 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005652:	f000 f977 	bl	8005944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005656:	f000 fd8f 	bl	8006178 <MX_GPIO_Init>
  MX_TIM9_Init();
 800565a:	f000 fc7d 	bl	8005f58 <MX_TIM9_Init>
  MX_SPI2_Init();
 800565e:	f000 fb11 	bl	8005c84 <MX_SPI2_Init>
  MX_ADC1_Init();
 8005662:	f000 f9db 	bl	8005a1c <MX_ADC1_Init>
  MX_ADC2_Init();
 8005666:	f000 fa2b 	bl	8005ac0 <MX_ADC2_Init>
  MX_CAN1_Init();
 800566a:	f000 fa7b 	bl	8005b64 <MX_CAN1_Init>
  MX_I2C1_Init();
 800566e:	f000 faad 	bl	8005bcc <MX_I2C1_Init>
  MX_I2C2_Init();
 8005672:	f000 fad9 	bl	8005c28 <MX_I2C2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005676:	f000 fd51 	bl	800611c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800567a:	f000 fb3b 	bl	8005cf4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800567e:	f000 fd23 	bl	80060c8 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8005682:	f000 fbef 	bl	8005e64 <MX_TIM8_Init>
  MX_TIM13_Init();
 8005686:	f000 fcd9 	bl	800603c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800568a:	2100      	movs	r1, #0
 800568c:	48a2      	ldr	r0, [pc, #648]	; (8005918 <main+0x2d0>)
 800568e:	f7fd fc11 	bl	8002eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8005692:	2104      	movs	r1, #4
 8005694:	48a0      	ldr	r0, [pc, #640]	; (8005918 <main+0x2d0>)
 8005696:	f7fd fb99 	bl	8002dcc <HAL_TIM_OC_Start>

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800569a:	2201      	movs	r2, #1
 800569c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056a0:	489e      	ldr	r0, [pc, #632]	; (800591c <main+0x2d4>)
 80056a2:	f7fb fe2d 	bl	8001300 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80056a6:	2200      	movs	r2, #0
 80056a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ac:	489b      	ldr	r0, [pc, #620]	; (800591c <main+0x2d4>)
 80056ae:	f7fb fe27 	bl	8001300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056b8:	4898      	ldr	r0, [pc, #608]	; (800591c <main+0x2d4>)
 80056ba:	f7fb fe21 	bl	8001300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80056be:	2201      	movs	r2, #1
 80056c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056c4:	4895      	ldr	r0, [pc, #596]	; (800591c <main+0x2d4>)
 80056c6:	f7fb fe1b 	bl	8001300 <HAL_GPIO_WritePin>
//  for(;;)
//   {
//   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//   HAL_Delay(600);
//   }
  int i=0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  //strcpy((char*)buf, "YUUP");
  sprintf((char*)buf, "START");
 80056ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056d2:	4a93      	ldr	r2, [pc, #588]	; (8005920 <main+0x2d8>)
 80056d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	3304      	adds	r3, #4
 80056dc:	8019      	strh	r1, [r3, #0]
  ch='t';
 80056de:	2374      	movs	r3, #116	; 0x74
 80056e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int blink_duration = 100;
 80056e4:	2364      	movs	r3, #100	; 0x64
 80056e6:	64bb      	str	r3, [r7, #72]	; 0x48

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80056e8:	213c      	movs	r1, #60	; 0x3c
 80056ea:	488e      	ldr	r0, [pc, #568]	; (8005924 <main+0x2dc>)
 80056ec:	f7fd fce7 	bl	80030be <HAL_TIM_Encoder_Start_IT>
  	//  	}

  	// --- SPI ----------------------------------------------------
  	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

  	uint16_t address = 0x0000;
 80056f0:	2300      	movs	r3, #0
 80056f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  	uint16_t value = 0x0000;
 80056f4:	2300      	movs	r3, #0
 80056f6:	857b      	strh	r3, [r7, #42]	; 0x2a

  	// --- set ABI and enable PWM
  	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 80056f8:	2318      	movs	r3, #24
 80056fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  	value = 0x0080 | AS_ODD;
 80056fc:	f248 0380 	movw	r3, #32896	; 0x8080
 8005700:	857b      	strh	r3, [r7, #42]	; 0x2a
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8005702:	2200      	movs	r2, #0
 8005704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005708:	4887      	ldr	r0, [pc, #540]	; (8005928 <main+0x2e0>)
 800570a:	f7fb fdf9 	bl	8001300 <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 800570e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005712:	2301      	movs	r3, #1
 8005714:	2201      	movs	r2, #1
 8005716:	4885      	ldr	r0, [pc, #532]	; (800592c <main+0x2e4>)
 8005718:	f7fc fd1c 	bl	8002154 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800571c:	2201      	movs	r2, #1
 800571e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005722:	4881      	ldr	r0, [pc, #516]	; (8005928 <main+0x2e0>)
 8005724:	f7fb fdec 	bl	8001300 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8005728:	2200      	movs	r2, #0
 800572a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800572e:	487e      	ldr	r0, [pc, #504]	; (8005928 <main+0x2e0>)
 8005730:	f7fb fde6 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8005734:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8005738:	2301      	movs	r3, #1
 800573a:	2201      	movs	r2, #1
 800573c:	487b      	ldr	r0, [pc, #492]	; (800592c <main+0x2e4>)
 800573e:	f7fc fd09 	bl	8002154 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8005742:	2201      	movs	r2, #1
 8005744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005748:	4877      	ldr	r0, [pc, #476]	; (8005928 <main+0x2e0>)
 800574a:	f7fb fdd9 	bl	8001300 <HAL_GPIO_WritePin>

		// --- set steps 2000steps 500 pulses
		address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 800574e:	f248 0319 	movw	r3, #32793	; 0x8019
 8005752:	85bb      	strh	r3, [r7, #44]	; 0x2c
		value = 0x0020 | AS_ODD;
 8005754:	f248 0320 	movw	r3, #32800	; 0x8020
 8005758:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800575a:	2200      	movs	r2, #0
 800575c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005760:	4871      	ldr	r0, [pc, #452]	; (8005928 <main+0x2e0>)
 8005762:	f7fb fdcd 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8005766:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800576a:	2301      	movs	r3, #1
 800576c:	2201      	movs	r2, #1
 800576e:	486f      	ldr	r0, [pc, #444]	; (800592c <main+0x2e4>)
 8005770:	f7fc fcf0 	bl	8002154 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8005774:	2201      	movs	r2, #1
 8005776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800577a:	486b      	ldr	r0, [pc, #428]	; (8005928 <main+0x2e0>)
 800577c:	f7fb fdc0 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8005780:	2200      	movs	r2, #0
 8005782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005786:	4868      	ldr	r0, [pc, #416]	; (8005928 <main+0x2e0>)
 8005788:	f7fb fdba 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 800578c:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8005790:	2301      	movs	r3, #1
 8005792:	2201      	movs	r2, #1
 8005794:	4865      	ldr	r0, [pc, #404]	; (800592c <main+0x2e4>)
 8005796:	f7fc fcdd 	bl	8002154 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800579a:	2201      	movs	r2, #1
 800579c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057a0:	4861      	ldr	r0, [pc, #388]	; (8005928 <main+0x2e0>)
 80057a2:	f7fb fdad 	bl	8001300 <HAL_GPIO_WritePin>

		// --- read angle
		address = 0x3FFE | AS_READ ;
 80057a6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80057aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t angle = 0x0000;
 80057ac:	2300      	movs	r3, #0
 80057ae:	853b      	strh	r3, [r7, #40]	; 0x28
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057b6:	485c      	ldr	r0, [pc, #368]	; (8005928 <main+0x2e0>)
 80057b8:	f7fb fda2 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 80057bc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80057c0:	2301      	movs	r3, #1
 80057c2:	2201      	movs	r2, #1
 80057c4:	4859      	ldr	r0, [pc, #356]	; (800592c <main+0x2e4>)
 80057c6:	f7fc fcc5 	bl	8002154 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80057ca:	2201      	movs	r2, #1
 80057cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057d0:	4855      	ldr	r0, [pc, #340]	; (8005928 <main+0x2e0>)
 80057d2:	f7fb fd95 	bl	8001300 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057dc:	4852      	ldr	r0, [pc, #328]	; (8005928 <main+0x2e0>)
 80057de:	f7fb fd8f 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 80057e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80057e6:	2301      	movs	r3, #1
 80057e8:	2201      	movs	r2, #1
 80057ea:	4850      	ldr	r0, [pc, #320]	; (800592c <main+0x2e4>)
 80057ec:	f7fc fde6 	bl	80023bc <HAL_SPI_Receive>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80057f0:	2201      	movs	r2, #1
 80057f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f6:	484c      	ldr	r0, [pc, #304]	; (8005928 <main+0x2e0>)
 80057f8:	f7fb fd82 	bl	8001300 <HAL_GPIO_WritePin>

		// --- ENCODER --------------------------------------------------------------
		//Follow: http://www.emcu.eu/how-to-interface-the-rotary-encoder-to-stm32-cube-mx-atollic/
		//I think for encoder mode, you should be using HAL_TIM_IC_CaptureCallback and HAL_TIM_Encoder_Start_IT.
		//code? https://stm32f4-discovery.net/2014/08/library-26-rotary-encoder-stm32f4/
		int16_t EncVal = TIM8->CNT;
 80057fc:	4b4c      	ldr	r3, [pc, #304]	; (8005930 <main+0x2e8>)
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


  	// --- GPIO ----------------------------------------------------
  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8005804:	2108      	movs	r1, #8
 8005806:	4845      	ldr	r0, [pc, #276]	; (800591c <main+0x2d4>)
 8005808:	f7fb fd93 	bl	8001332 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);

  	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	  GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 800580c:	4b43      	ldr	r3, [pc, #268]	; (800591c <main+0x2d4>)
 800580e:	2210      	movs	r2, #16
 8005810:	619a      	str	r2, [r3, #24]
//			TIM1->CCR2 = 0;
//			//GPIOE->BSRR = (uint32_t)GPIO_PIN_8 << 16U;
//		}

	  // --- TIMERS ----------------------------------------------------
	  TIM9->CCR1 = blink_duration;
 8005812:	4a48      	ldr	r2, [pc, #288]	; (8005934 <main+0x2ec>)
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM9->CCR2 = blink_duration;
 8005818:	4a46      	ldr	r2, [pc, #280]	; (8005934 <main+0x2ec>)
 800581a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581c:	6393      	str	r3, [r2, #56]	; 0x38



	  i++;
 800581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005820:	3301      	adds	r3, #1
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c

	  // --- UART ----------------------------------------------------
	  char buffer[20];
	  char buffer0[20];
	  //sprintf(buffer, "%f", Tval);
	  angle &= AS_DATA_MASK;
 8005824:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800582a:	b29b      	uxth	r3, r3
 800582c:	853b      	strh	r3, [r7, #40]	; 0x28
	  itoa(EncVal, buffer0, 10);
 800582e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8005832:	4639      	mov	r1, r7
 8005834:	220a      	movs	r2, #10
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fa7e 	bl	8006d38 <itoa>
	  itoa(angle, buffer, 10);
 800583c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800583e:	4618      	mov	r0, r3
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	220a      	movs	r2, #10
 8005846:	4619      	mov	r1, r3
 8005848:	f001 fa76 	bl	8006d38 <itoa>

	  HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 800584c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005850:	2201      	movs	r2, #1
 8005852:	4619      	mov	r1, r3
 8005854:	4838      	ldr	r0, [pc, #224]	; (8005938 <main+0x2f0>)
 8005856:	f7fe fddf 	bl	8004418 <HAL_UART_Receive_IT>

	  sprintf((char*)buf, strcat(strcat(strcat(buffer0, "_"), strncat(buffer, &ch, 1)),"\r\n"));
 800585a:	463b      	mov	r3, r7
 800585c:	4618      	mov	r0, r3
 800585e:	f7fa fcb7 	bl	80001d0 <strlen>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	463b      	mov	r3, r7
 8005868:	4413      	add	r3, r2
 800586a:	4934      	ldr	r1, [pc, #208]	; (800593c <main+0x2f4>)
 800586c:	461a      	mov	r2, r3
 800586e:	460b      	mov	r3, r1
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	8013      	strh	r3, [r2, #0]
 8005874:	463c      	mov	r4, r7
 8005876:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800587a:	f107 0314 	add.w	r3, r7, #20
 800587e:	2201      	movs	r2, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fa92 	bl	8006daa <strncat>
 8005886:	4603      	mov	r3, r0
 8005888:	4619      	mov	r1, r3
 800588a:	4620      	mov	r0, r4
 800588c:	f001 fa7e 	bl	8006d8c <strcat>
 8005890:	4604      	mov	r4, r0
 8005892:	4620      	mov	r0, r4
 8005894:	f7fa fc9c 	bl	80001d0 <strlen>
 8005898:	4603      	mov	r3, r0
 800589a:	4423      	add	r3, r4
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <main+0x2f8>)
 800589e:	8811      	ldrh	r1, [r2, #0]
 80058a0:	7892      	ldrb	r2, [r2, #2]
 80058a2:	8019      	strh	r1, [r3, #0]
 80058a4:	709a      	strb	r2, [r3, #2]
 80058a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058aa:	4621      	mov	r1, r4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fa4d 	bl	8006d4c <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 80058b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fa fc8a 	bl	80001d0 <strlen>
 80058bc:	4603      	mov	r3, r0
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80058c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058c8:	481b      	ldr	r0, [pc, #108]	; (8005938 <main+0x2f0>)
 80058ca:	f7fe fd0c 	bl	80042e6 <HAL_UART_Transmit>

	  //HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

	  switch(ch){
 80058ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058d2:	2b73      	cmp	r3, #115	; 0x73
 80058d4:	d00c      	beq.n	80058f0 <main+0x2a8>
 80058d6:	2b77      	cmp	r3, #119	; 0x77
 80058d8:	d116      	bne.n	8005908 <main+0x2c0>
			case 'w':
				ch='t';
 80058da:	2374      	movs	r3, #116	; 0x74
 80058dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				blink_duration *= 2;
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	64bb      	str	r3, [r7, #72]	; 0x48
				//HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);
				HAL_Delay(2000);
 80058e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80058ea:	f7fa febb 	bl	8000664 <HAL_Delay>
				break;
 80058ee:	e012      	b.n	8005916 <main+0x2ce>
			case 's':
				ch='t';
 80058f0:	2374      	movs	r3, #116	; 0x74
 80058f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				blink_duration /= 2;
 80058f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f8:	0fda      	lsrs	r2, r3, #31
 80058fa:	4413      	add	r3, r2
 80058fc:	105b      	asrs	r3, r3, #1
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
				HAL_Delay(100);
 8005900:	2064      	movs	r0, #100	; 0x64
 8005902:	f7fa feaf 	bl	8000664 <HAL_Delay>
				break;
 8005906:	e006      	b.n	8005916 <main+0x2ce>
			default:
				ch='t';
 8005908:	2374      	movs	r3, #116	; 0x74
 800590a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				HAL_Delay(500);
 800590e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005912:	f7fa fea7 	bl	8000664 <HAL_Delay>
  {
 8005916:	e6eb      	b.n	80056f0 <main+0xa8>
 8005918:	20000734 	.word	0x20000734
 800591c:	40021000 	.word	0x40021000
 8005920:	08007634 	.word	0x08007634
 8005924:	200000f4 	.word	0x200000f4
 8005928:	40020c00 	.word	0x40020c00
 800592c:	2000009c 	.word	0x2000009c
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	20000134 	.word	0x20000134
 800593c:	0800763c 	.word	0x0800763c
 8005940:	08007640 	.word	0x08007640

08005944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b094      	sub	sp, #80	; 0x50
 8005948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800594a:	f107 0320 	add.w	r3, r7, #32
 800594e:	2230      	movs	r2, #48	; 0x30
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f001 f9f2 	bl	8006d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	60da      	str	r2, [r3, #12]
 8005966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005968:	2300      	movs	r3, #0
 800596a:	60bb      	str	r3, [r7, #8]
 800596c:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <SystemClock_Config+0xd0>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <SystemClock_Config+0xd0>)
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	6413      	str	r3, [r2, #64]	; 0x40
 8005978:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <SystemClock_Config+0xd0>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005984:	2300      	movs	r3, #0
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <SystemClock_Config+0xd4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <SystemClock_Config+0xd4>)
 800598e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <SystemClock_Config+0xd4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80059a0:	2303      	movs	r3, #3
 80059a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80059a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059aa:	2301      	movs	r3, #1
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059ae:	2310      	movs	r3, #16
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059b2:	2302      	movs	r3, #2
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80059bc:	230f      	movs	r3, #15
 80059be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80059c0:	2390      	movs	r3, #144	; 0x90
 80059c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059c4:	2302      	movs	r3, #2
 80059c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80059c8:	2305      	movs	r3, #5
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059cc:	f107 0320 	add.w	r3, r7, #32
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fb ff1f 	bl	8001814 <HAL_RCC_OscConfig>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80059dc:	f000 fc6c 	bl	80062b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059e0:	230f      	movs	r3, #15
 80059e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80059f4:	f107 030c 	add.w	r3, r7, #12
 80059f8:	2100      	movs	r1, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fc f97a 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005a06:	f000 fc57 	bl	80062b8 <Error_Handler>
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3750      	adds	r7, #80	; 0x50
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40007000 	.word	0x40007000

08005a1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a22:	463b      	mov	r3, r7
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a30:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <MX_ADC1_Init+0x9c>)
 8005a32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005a3a:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005a40:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005a46:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a54:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a5a:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a5c:	4a17      	ldr	r2, [pc, #92]	; (8005abc <MX_ADC1_Init+0xa0>)
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a60:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005a6c:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a7a:	480e      	ldr	r0, [pc, #56]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a7c:	f7fa fe14 	bl	80006a8 <HAL_ADC_Init>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005a86:	f000 fc17 	bl	80062b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a96:	463b      	mov	r3, r7
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4806      	ldr	r0, [pc, #24]	; (8005ab4 <MX_ADC1_Init+0x98>)
 8005a9c:	f7fa fe48 	bl	8000730 <HAL_ADC_ConfigChannel>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8005aa6:	f000 fc07 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2000066c 	.word	0x2000066c
 8005ab8:	40012000 	.word	0x40012000
 8005abc:	0f000001 	.word	0x0f000001

08005ac0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005ad4:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <MX_ADC2_Init+0x9c>)
 8005ad6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005ad8:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005af8:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005afe:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <MX_ADC2_Init+0xa0>)
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b18:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005b1e:	480e      	ldr	r0, [pc, #56]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b20:	f7fa fdc2 	bl	80006a8 <HAL_ADC_Init>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8005b2a:	f000 fbc5 	bl	80062b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005b2e:	230e      	movs	r3, #14
 8005b30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4806      	ldr	r0, [pc, #24]	; (8005b58 <MX_ADC2_Init+0x98>)
 8005b40:	f7fa fdf6 	bl	8000730 <HAL_ADC_ConfigChannel>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8005b4a:	f000 fbb5 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000174 	.word	0x20000174
 8005b5c:	40012100 	.word	0x40012100
 8005b60:	0f000001 	.word	0x0f000001

08005b64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005b68:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <MX_CAN1_Init+0x64>)
 8005b6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b70:	2210      	movs	r2, #16
 8005b72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8005b80:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8005b86:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005bb0:	4804      	ldr	r0, [pc, #16]	; (8005bc4 <MX_CAN1_Init+0x60>)
 8005bb2:	f7fa ffdb 	bl	8000b6c <HAL_CAN_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8005bbc:	f000 fb7c 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005bc0:	bf00      	nop
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000774 	.word	0x20000774
 8005bc8:	40006400 	.word	0x40006400

08005bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bd2:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <MX_I2C1_Init+0x54>)
 8005bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bd8:	4a12      	ldr	r2, [pc, #72]	; (8005c24 <MX_I2C1_Init+0x58>)
 8005bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c02:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c08:	4804      	ldr	r0, [pc, #16]	; (8005c1c <MX_I2C1_Init+0x50>)
 8005c0a:	f7fb fbad 	bl	8001368 <HAL_I2C_Init>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005c14:	f000 fb50 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c18:	bf00      	nop
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	200001bc 	.word	0x200001bc
 8005c20:	40005400 	.word	0x40005400
 8005c24:	000186a0 	.word	0x000186a0

08005c28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <MX_I2C2_Init+0x54>)
 8005c30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005c32:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c34:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <MX_I2C2_Init+0x58>)
 8005c36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c64:	4804      	ldr	r0, [pc, #16]	; (8005c78 <MX_I2C2_Init+0x50>)
 8005c66:	f7fb fb7f 	bl	8001368 <HAL_I2C_Init>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c70:	f000 fb22 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c74:	bf00      	nop
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000618 	.word	0x20000618
 8005c7c:	40005800 	.word	0x40005800
 8005c80:	000186a0 	.word	0x000186a0

08005c84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <MX_SPI2_Init+0x68>)
 8005c8a:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <MX_SPI2_Init+0x6c>)
 8005c8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005c8e:	4b17      	ldr	r3, [pc, #92]	; (8005cec <MX_SPI2_Init+0x68>)
 8005c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <MX_SPI2_Init+0x68>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <MX_SPI2_Init+0x68>)
 8005c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <MX_SPI2_Init+0x68>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cb2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005cb6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cba:	2218      	movs	r2, #24
 8005cbc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cca:	4b08      	ldr	r3, [pc, #32]	; (8005cec <MX_SPI2_Init+0x68>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005cd6:	4805      	ldr	r0, [pc, #20]	; (8005cec <MX_SPI2_Init+0x68>)
 8005cd8:	f7fc f9d8 	bl	800208c <HAL_SPI_Init>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8005ce2:	f000 fae9 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000009c 	.word	0x2000009c
 8005cf0:	40003800 	.word	0x40003800

08005cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b096      	sub	sp, #88	; 0x58
 8005cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	605a      	str	r2, [r3, #4]
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	609a      	str	r2, [r3, #8]
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	611a      	str	r2, [r3, #16]
 8005d22:	615a      	str	r2, [r3, #20]
 8005d24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	2220      	movs	r2, #32
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 f805 	bl	8006d3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d32:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d34:	4a4a      	ldr	r2, [pc, #296]	; (8005e60 <MX_TIM1_Init+0x16c>)
 8005d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8005d38:	4b48      	ldr	r3, [pc, #288]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8005d44:	4b45      	ldr	r3, [pc, #276]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d4c:	4b43      	ldr	r3, [pc, #268]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d52:	4b42      	ldr	r3, [pc, #264]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d58:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005d5e:	483f      	ldr	r0, [pc, #252]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d60:	f7fd f808 	bl	8002d74 <HAL_TIM_Base_Init>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005d6a:	f000 faa5 	bl	80062b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005d74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4838      	ldr	r0, [pc, #224]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d7c:	f7fd fc60 	bl	8003640 <HAL_TIM_ConfigClockSource>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005d86:	f000 fa97 	bl	80062b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d8a:	4834      	ldr	r0, [pc, #208]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005d8c:	f7fd f85c 	bl	8002e48 <HAL_TIM_PWM_Init>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005d96:	f000 fa8f 	bl	80062b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005da2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005da6:	4619      	mov	r1, r3
 8005da8:	482c      	ldr	r0, [pc, #176]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005daa:	f7fe f96d 	bl	8004088 <HAL_TIMEx_MasterConfigSynchronization>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005db4:	f000 fa80 	bl	80062b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005db8:	2360      	movs	r3, #96	; 0x60
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4619      	mov	r1, r3
 8005ddc:	481f      	ldr	r0, [pc, #124]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005dde:	f7fd fb69 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005de8:	f000 fa66 	bl	80062b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df0:	2204      	movs	r2, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4819      	ldr	r0, [pc, #100]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005df6:	f7fd fb5d 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005e00:	f000 fa5a 	bl	80062b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e08:	2208      	movs	r2, #8
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4813      	ldr	r0, [pc, #76]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005e0e:	f7fd fb51 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8005e18:	f000 fa4e 	bl	80062b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4807      	ldr	r0, [pc, #28]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005e40:	f7fe f99e 	bl	8004180 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8005e4a:	f000 fa35 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e4e:	4803      	ldr	r0, [pc, #12]	; (8005e5c <MX_TIM1_Init+0x168>)
 8005e50:	f000 fd2e 	bl	80068b0 <HAL_TIM_MspPostInit>

}
 8005e54:	bf00      	nop
 8005e56:	3758      	adds	r7, #88	; 0x58
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200006f4 	.word	0x200006f4
 8005e60:	40010000 	.word	0x40010000

08005e64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b090      	sub	sp, #64	; 0x40
 8005e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e6a:	f107 031c 	add.w	r3, r7, #28
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 ff62 	bl	8006d3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005e90:	4a30      	ldr	r2, [pc, #192]	; (8005f54 <MX_TIM8_Init+0xf0>)
 8005e92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005e94:	4b2e      	ldr	r3, [pc, #184]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ea6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ea8:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005eae:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eb4:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8005eba:	4825      	ldr	r0, [pc, #148]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005ebc:	f7fd f838 	bl	8002f30 <HAL_TIM_IC_Init>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8005ec6:	f000 f9f7 	bl	80062b8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005eee:	f107 031c 	add.w	r3, r7, #28
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4816      	ldr	r0, [pc, #88]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005ef6:	f7fd f846 	bl	8002f86 <HAL_TIM_Encoder_Init>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 8005f00:	f000 f9da 	bl	80062b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	4619      	mov	r1, r3
 8005f12:	480f      	ldr	r0, [pc, #60]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005f14:	f7fe f8b8 	bl	8004088 <HAL_TIMEx_MasterConfigSynchronization>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8005f1e:	f000 f9cb 	bl	80062b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005f26:	2301      	movs	r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	2208      	movs	r2, #8
 8005f36:	4619      	mov	r1, r3
 8005f38:	4805      	ldr	r0, [pc, #20]	; (8005f50 <MX_TIM8_Init+0xec>)
 8005f3a:	f7fd fa1f 	bl	800337c <HAL_TIM_IC_ConfigChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8005f44:	f000 f9b8 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005f48:	bf00      	nop
 8005f4a:	3740      	adds	r7, #64	; 0x40
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200000f4 	.word	0x200000f4
 8005f54:	40010400 	.word	0x40010400

08005f58 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f5e:	f107 0320 	add.w	r3, r7, #32
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	609a      	str	r2, [r3, #8]
 8005f6a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
 8005f74:	609a      	str	r2, [r3, #8]
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	611a      	str	r2, [r3, #16]
 8005f7a:	615a      	str	r2, [r3, #20]
 8005f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005f80:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <MX_TIM9_Init+0xe0>)
 8005f82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005f86:	2202      	movs	r2, #2
 8005f88:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f8a:	4b2a      	ldr	r3, [pc, #168]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f96:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f98:	4b26      	ldr	r3, [pc, #152]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005fa4:	4823      	ldr	r0, [pc, #140]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005fa6:	f7fc fee5 	bl	8002d74 <HAL_TIM_Base_Init>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8005fb0:	f000 f982 	bl	80062b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005fba:	f107 0320 	add.w	r3, r7, #32
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	481c      	ldr	r0, [pc, #112]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005fc2:	f7fd fb3d 	bl	8003640 <HAL_TIM_ConfigClockSource>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005fcc:	f000 f974 	bl	80062b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005fd0:	4818      	ldr	r0, [pc, #96]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005fd2:	f7fc ff39 	bl	8002e48 <HAL_TIM_PWM_Init>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005fdc:	f000 f96c 	bl	80062b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fe0:	2360      	movs	r3, #96	; 0x60
 8005fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	480e      	ldr	r0, [pc, #56]	; (8006034 <MX_TIM9_Init+0xdc>)
 8005ffa:	f7fd fa5b 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8006004:	f000 f958 	bl	80062b8 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8006008:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800600c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800600e:	1d3b      	adds	r3, r7, #4
 8006010:	2204      	movs	r2, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4807      	ldr	r0, [pc, #28]	; (8006034 <MX_TIM9_Init+0xdc>)
 8006016:	f7fd fa4d 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8006020:	f000 f94a 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8006024:	4803      	ldr	r0, [pc, #12]	; (8006034 <MX_TIM9_Init+0xdc>)
 8006026:	f000 fc43 	bl	80068b0 <HAL_TIM_MspPostInit>

}
 800602a:	bf00      	nop
 800602c:	3730      	adds	r7, #48	; 0x30
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000734 	.word	0x20000734
 8006038:	40014000 	.word	0x40014000

0800603c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8006042:	463b      	mov	r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800604e:	4b1c      	ldr	r3, [pc, #112]	; (80060c0 <MX_TIM13_Init+0x84>)
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <MX_TIM13_Init+0x88>)
 8006052:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8006054:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <MX_TIM13_Init+0x84>)
 8006056:	2200      	movs	r2, #0
 8006058:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800605a:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <MX_TIM13_Init+0x84>)
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8006060:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <MX_TIM13_Init+0x84>)
 8006062:	2200      	movs	r2, #0
 8006064:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006066:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <MX_TIM13_Init+0x84>)
 8006068:	2200      	movs	r2, #0
 800606a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <MX_TIM13_Init+0x84>)
 800606e:	2200      	movs	r2, #0
 8006070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006072:	4813      	ldr	r0, [pc, #76]	; (80060c0 <MX_TIM13_Init+0x84>)
 8006074:	f7fc fe7e 	bl	8002d74 <HAL_TIM_Base_Init>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800607e:	f000 f91b 	bl	80062b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8006082:	480f      	ldr	r0, [pc, #60]	; (80060c0 <MX_TIM13_Init+0x84>)
 8006084:	f7fc ff54 	bl	8002f30 <HAL_TIM_IC_Init>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800608e:	f000 f913 	bl	80062b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006092:	2300      	movs	r3, #0
 8006094:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006096:	2301      	movs	r3, #1
 8006098:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80060a2:	463b      	mov	r3, r7
 80060a4:	2200      	movs	r2, #0
 80060a6:	4619      	mov	r1, r3
 80060a8:	4805      	ldr	r0, [pc, #20]	; (80060c0 <MX_TIM13_Init+0x84>)
 80060aa:	f7fd f967 	bl	800337c <HAL_TIM_IC_ConfigChannel>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 80060b4:	f000 f900 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	200006b4 	.word	0x200006b4
 80060c4:	40001c00 	.word	0x40001c00

080060c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060ce:	4a12      	ldr	r2, [pc, #72]	; (8006118 <MX_USART3_UART_Init+0x50>)
 80060d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80060da:	4b0e      	ldr	r3, [pc, #56]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80060ec:	4b09      	ldr	r3, [pc, #36]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060ee:	220c      	movs	r2, #12
 80060f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80060fe:	4805      	ldr	r0, [pc, #20]	; (8006114 <MX_USART3_UART_Init+0x4c>)
 8006100:	f7fe f8a4 	bl	800424c <HAL_UART_Init>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800610a:	f000 f8d5 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800610e:	bf00      	nop
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000134 	.word	0x20000134
 8006118:	40004800 	.word	0x40004800

0800611c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006126:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006128:	4b12      	ldr	r3, [pc, #72]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800612a:	2204      	movs	r2, #4
 800612c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006130:	2202      	movs	r2, #2
 8006132:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006136:	2200      	movs	r2, #0
 8006138:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800613a:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800613c:	2202      	movs	r2, #2
 800613e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006142:	2200      	movs	r2, #0
 8006144:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006148:	2200      	movs	r2, #0
 800614a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800614e:	2200      	movs	r2, #0
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006152:	4b08      	ldr	r3, [pc, #32]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006154:	2200      	movs	r2, #0
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800615e:	4805      	ldr	r0, [pc, #20]	; (8006174 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006160:	f7fb fa3a 	bl	80015d8 <HAL_PCD_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800616a:	f000 f8a5 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800616e:	bf00      	nop
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000210 	.word	0x20000210

08006178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617e:	f107 031c 	add.w	r3, r7, #28
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	609a      	str	r2, [r3, #8]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	4b46      	ldr	r3, [pc, #280]	; (80062ac <MX_GPIO_Init+0x134>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	4a45      	ldr	r2, [pc, #276]	; (80062ac <MX_GPIO_Init+0x134>)
 8006198:	f043 0310 	orr.w	r3, r3, #16
 800619c:	6313      	str	r3, [r2, #48]	; 0x30
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <MX_GPIO_Init+0x134>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	4b3f      	ldr	r3, [pc, #252]	; (80062ac <MX_GPIO_Init+0x134>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	4a3e      	ldr	r2, [pc, #248]	; (80062ac <MX_GPIO_Init+0x134>)
 80061b4:	f043 0304 	orr.w	r3, r3, #4
 80061b8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ba:	4b3c      	ldr	r3, [pc, #240]	; (80062ac <MX_GPIO_Init+0x134>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	4b38      	ldr	r3, [pc, #224]	; (80062ac <MX_GPIO_Init+0x134>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a37      	ldr	r2, [pc, #220]	; (80062ac <MX_GPIO_Init+0x134>)
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30
 80061d6:	4b35      	ldr	r3, [pc, #212]	; (80062ac <MX_GPIO_Init+0x134>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	4b31      	ldr	r3, [pc, #196]	; (80062ac <MX_GPIO_Init+0x134>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	4a30      	ldr	r2, [pc, #192]	; (80062ac <MX_GPIO_Init+0x134>)
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	6313      	str	r3, [r2, #48]	; 0x30
 80061f2:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <MX_GPIO_Init+0x134>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	4b2a      	ldr	r3, [pc, #168]	; (80062ac <MX_GPIO_Init+0x134>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	4a29      	ldr	r2, [pc, #164]	; (80062ac <MX_GPIO_Init+0x134>)
 8006208:	f043 0302 	orr.w	r3, r3, #2
 800620c:	6313      	str	r3, [r2, #48]	; 0x30
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <MX_GPIO_Init+0x134>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <MX_GPIO_Init+0x134>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	4a22      	ldr	r2, [pc, #136]	; (80062ac <MX_GPIO_Init+0x134>)
 8006224:	f043 0308 	orr.w	r3, r3, #8
 8006228:	6313      	str	r3, [r2, #48]	; 0x30
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <MX_GPIO_Init+0x134>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8006236:	2200      	movs	r2, #0
 8006238:	f24c 0118 	movw	r1, #49176	; 0xc018
 800623c:	481c      	ldr	r0, [pc, #112]	; (80062b0 <MX_GPIO_Init+0x138>)
 800623e:	f7fb f85f 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROT0_nCS_Pin|nSCS_Pin, GPIO_PIN_RESET);
 8006242:	2200      	movs	r2, #0
 8006244:	f248 0180 	movw	r1, #32896	; 0x8080
 8006248:	481a      	ldr	r0, [pc, #104]	; (80062b4 <MX_GPIO_Init+0x13c>)
 800624a:	f7fb f859 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800624e:	f24c 0318 	movw	r3, #49176	; 0xc018
 8006252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006254:	2301      	movs	r3, #1
 8006256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006258:	2300      	movs	r3, #0
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625c:	2300      	movs	r3, #0
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006260:	f107 031c 	add.w	r3, r7, #28
 8006264:	4619      	mov	r1, r3
 8006266:	4812      	ldr	r0, [pc, #72]	; (80062b0 <MX_GPIO_Init+0x138>)
 8006268:	f7fa feb0 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT0_nCS_Pin nSCS_Pin */
  GPIO_InitStruct.Pin = ROT0_nCS_Pin|nSCS_Pin;
 800626c:	f248 0380 	movw	r3, #32896	; 0x8080
 8006270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006272:	2301      	movs	r3, #1
 8006274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627a:	2300      	movs	r3, #0
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800627e:	f107 031c 	add.w	r3, r7, #28
 8006282:	4619      	mov	r1, r3
 8006284:	480b      	ldr	r0, [pc, #44]	; (80062b4 <MX_GPIO_Init+0x13c>)
 8006286:	f7fa fea1 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800628a:	2370      	movs	r3, #112	; 0x70
 800628c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800628e:	2300      	movs	r3, #0
 8006290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006292:	2301      	movs	r3, #1
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006296:	f107 031c 	add.w	r3, r7, #28
 800629a:	4619      	mov	r1, r3
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <MX_GPIO_Init+0x13c>)
 800629e:	f7fa fe95 	bl	8000fcc <HAL_GPIO_Init>

}
 80062a2:	bf00      	nop
 80062a4:	3730      	adds	r7, #48	; 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40023800 	.word	0x40023800
 80062b0:	40021000 	.word	0x40021000
 80062b4:	40020c00 	.word	0x40020c00

080062b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <HAL_MspInit+0x4c>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	4a0f      	ldr	r2, [pc, #60]	; (8006314 <HAL_MspInit+0x4c>)
 80062d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062dc:	6453      	str	r3, [r2, #68]	; 0x44
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <HAL_MspInit+0x4c>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_MspInit+0x4c>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a08      	ldr	r2, [pc, #32]	; (8006314 <HAL_MspInit+0x4c>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_MspInit+0x4c>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800

08006318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a48      	ldr	r2, [pc, #288]	; (8006458 <HAL_ADC_MspInit+0x140>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d142      	bne.n	80063c0 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800633a:	2300      	movs	r3, #0
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	4b47      	ldr	r3, [pc, #284]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	4a46      	ldr	r2, [pc, #280]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006348:	6453      	str	r3, [r2, #68]	; 0x44
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <HAL_ADC_MspInit+0x144>)
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	623b      	str	r3, [r7, #32]
 8006354:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	4b40      	ldr	r3, [pc, #256]	; (800645c <HAL_ADC_MspInit+0x144>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	4a3f      	ldr	r2, [pc, #252]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006360:	f043 0304 	orr.w	r3, r3, #4
 8006364:	6313      	str	r3, [r2, #48]	; 0x30
 8006366:	4b3d      	ldr	r3, [pc, #244]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	4b39      	ldr	r3, [pc, #228]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	4a38      	ldr	r2, [pc, #224]	; (800645c <HAL_ADC_MspInit+0x144>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6313      	str	r3, [r2, #48]	; 0x30
 8006382:	4b36      	ldr	r3, [pc, #216]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 800638e:	230e      	movs	r3, #14
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006392:	2303      	movs	r3, #3
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006396:	2300      	movs	r3, #0
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800639a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800639e:	4619      	mov	r1, r3
 80063a0:	482f      	ldr	r0, [pc, #188]	; (8006460 <HAL_ADC_MspInit+0x148>)
 80063a2:	f7fa fe13 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 80063a6:	233e      	movs	r3, #62	; 0x3e
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063aa:	2303      	movs	r3, #3
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063b6:	4619      	mov	r1, r3
 80063b8:	482a      	ldr	r0, [pc, #168]	; (8006464 <HAL_ADC_MspInit+0x14c>)
 80063ba:	f7fa fe07 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80063be:	e046      	b.n	800644e <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a28      	ldr	r2, [pc, #160]	; (8006468 <HAL_ADC_MspInit+0x150>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d141      	bne.n	800644e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <HAL_ADC_MspInit+0x144>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_ADC_MspInit+0x144>)
 80063d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063d8:	6453      	str	r3, [r2, #68]	; 0x44
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_ADC_MspInit+0x144>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	4b1c      	ldr	r3, [pc, #112]	; (800645c <HAL_ADC_MspInit+0x144>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a1b      	ldr	r2, [pc, #108]	; (800645c <HAL_ADC_MspInit+0x144>)
 80063f0:	f043 0304 	orr.w	r3, r3, #4
 80063f4:	6313      	str	r3, [r2, #48]	; 0x30
 80063f6:	4b19      	ldr	r3, [pc, #100]	; (800645c <HAL_ADC_MspInit+0x144>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	4b15      	ldr	r3, [pc, #84]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	4a14      	ldr	r2, [pc, #80]	; (800645c <HAL_ADC_MspInit+0x144>)
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	6313      	str	r3, [r2, #48]	; 0x30
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_ADC_MspInit+0x144>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 800641e:	2330      	movs	r3, #48	; 0x30
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006422:	2303      	movs	r3, #3
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006426:	2300      	movs	r3, #0
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800642a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642e:	4619      	mov	r1, r3
 8006430:	480b      	ldr	r0, [pc, #44]	; (8006460 <HAL_ADC_MspInit+0x148>)
 8006432:	f7fa fdcb 	bl	8000fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 8006436:	2301      	movs	r3, #1
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800643a:	2303      	movs	r3, #3
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 8006442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006446:	4619      	mov	r1, r3
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <HAL_ADC_MspInit+0x154>)
 800644a:	f7fa fdbf 	bl	8000fcc <HAL_GPIO_Init>
}
 800644e:	bf00      	nop
 8006450:	3738      	adds	r7, #56	; 0x38
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40012000 	.word	0x40012000
 800645c:	40023800 	.word	0x40023800
 8006460:	40020800 	.word	0x40020800
 8006464:	40020000 	.word	0x40020000
 8006468:	40012100 	.word	0x40012100
 800646c:	40020400 	.word	0x40020400

08006470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	609a      	str	r2, [r3, #8]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a19      	ldr	r2, [pc, #100]	; (80064f4 <HAL_CAN_MspInit+0x84>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d12b      	bne.n	80064ea <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <HAL_CAN_MspInit+0x88>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <HAL_CAN_MspInit+0x88>)
 800649c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064a0:	6413      	str	r3, [r2, #64]	; 0x40
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <HAL_CAN_MspInit+0x88>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <HAL_CAN_MspInit+0x88>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <HAL_CAN_MspInit+0x88>)
 80064b8:	f043 0308 	orr.w	r3, r3, #8
 80064bc:	6313      	str	r3, [r2, #48]	; 0x30
 80064be:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <HAL_CAN_MspInit+0x88>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064ca:	2303      	movs	r3, #3
 80064cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ce:	2302      	movs	r3, #2
 80064d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d6:	2303      	movs	r3, #3
 80064d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064da:	2309      	movs	r3, #9
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064de:	f107 0314 	add.w	r3, r7, #20
 80064e2:	4619      	mov	r1, r3
 80064e4:	4805      	ldr	r0, [pc, #20]	; (80064fc <HAL_CAN_MspInit+0x8c>)
 80064e6:	f7fa fd71 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80064ea:	bf00      	nop
 80064ec:	3728      	adds	r7, #40	; 0x28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40006400 	.word	0x40006400
 80064f8:	40023800 	.word	0x40023800
 80064fc:	40020c00 	.word	0x40020c00

08006500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006508:	f107 031c 	add.w	r3, r7, #28
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a32      	ldr	r2, [pc, #200]	; (80065e8 <HAL_I2C_MspInit+0xe8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d12c      	bne.n	800657c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	4b31      	ldr	r3, [pc, #196]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a30      	ldr	r2, [pc, #192]	; (80065ec <HAL_I2C_MspInit+0xec>)
 800652c:	f043 0302 	orr.w	r3, r3, #2
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800653e:	23c0      	movs	r3, #192	; 0xc0
 8006540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006542:	2312      	movs	r3, #18
 8006544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006546:	2301      	movs	r3, #1
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654a:	2303      	movs	r3, #3
 800654c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800654e:	2304      	movs	r3, #4
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006552:	f107 031c 	add.w	r3, r7, #28
 8006556:	4619      	mov	r1, r3
 8006558:	4825      	ldr	r0, [pc, #148]	; (80065f0 <HAL_I2C_MspInit+0xf0>)
 800655a:	f7fa fd37 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	4b22      	ldr	r3, [pc, #136]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
 800656e:	4b1f      	ldr	r3, [pc, #124]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800657a:	e031      	b.n	80065e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1c      	ldr	r2, [pc, #112]	; (80065f4 <HAL_I2C_MspInit+0xf4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d12c      	bne.n	80065e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <HAL_I2C_MspInit+0xec>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	6313      	str	r3, [r2, #48]	; 0x30
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <HAL_I2C_MspInit+0xec>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80065a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065a8:	2312      	movs	r3, #18
 80065aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065ac:	2301      	movs	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b0:	2303      	movs	r3, #3
 80065b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065b4:	2304      	movs	r3, #4
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b8:	f107 031c 	add.w	r3, r7, #28
 80065bc:	4619      	mov	r1, r3
 80065be:	480c      	ldr	r0, [pc, #48]	; (80065f0 <HAL_I2C_MspInit+0xf0>)
 80065c0:	f7fa fd04 	bl	8000fcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	4b08      	ldr	r3, [pc, #32]	; (80065ec <HAL_I2C_MspInit+0xec>)
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	4a07      	ldr	r2, [pc, #28]	; (80065ec <HAL_I2C_MspInit+0xec>)
 80065ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065d2:	6413      	str	r3, [r2, #64]	; 0x40
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <HAL_I2C_MspInit+0xec>)
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	bf00      	nop
 80065e2:	3730      	adds	r7, #48	; 0x30
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40005400 	.word	0x40005400
 80065ec:	40023800 	.word	0x40023800
 80065f0:	40020400 	.word	0x40020400
 80065f4:	40005800 	.word	0x40005800

080065f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_SPI_MspInit+0x94>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d134      	bne.n	8006684 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <HAL_SPI_MspInit+0x98>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <HAL_SPI_MspInit+0x98>)
 8006624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006628:	6413      	str	r3, [r2, #64]	; 0x40
 800662a:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_SPI_MspInit+0x98>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4b15      	ldr	r3, [pc, #84]	; (8006690 <HAL_SPI_MspInit+0x98>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	4a14      	ldr	r2, [pc, #80]	; (8006690 <HAL_SPI_MspInit+0x98>)
 8006640:	f043 0302 	orr.w	r3, r3, #2
 8006644:	6313      	str	r3, [r2, #48]	; 0x30
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <HAL_SPI_MspInit+0x98>)
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006652:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006658:	2302      	movs	r3, #2
 800665a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006660:	2303      	movs	r3, #3
 8006662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006664:	2305      	movs	r3, #5
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	4619      	mov	r1, r3
 800666e:	4809      	ldr	r0, [pc, #36]	; (8006694 <HAL_SPI_MspInit+0x9c>)
 8006670:	f7fa fcac 	bl	8000fcc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006674:	2200      	movs	r2, #0
 8006676:	2100      	movs	r1, #0
 8006678:	2024      	movs	r0, #36	; 0x24
 800667a:	f7fa fc4e 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800667e:	2024      	movs	r0, #36	; 0x24
 8006680:	f7fa fc67 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006684:	bf00      	nop
 8006686:	3728      	adds	r7, #40	; 0x28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40003800 	.word	0x40003800
 8006690:	40023800 	.word	0x40023800
 8006694:	40020400 	.word	0x40020400

08006698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	609a      	str	r2, [r3, #8]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a45      	ldr	r2, [pc, #276]	; (80067cc <HAL_TIM_Base_MspInit+0x134>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12e      	bne.n	8006718 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	4b44      	ldr	r3, [pc, #272]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	4a43      	ldr	r2, [pc, #268]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	6453      	str	r3, [r2, #68]	; 0x44
 80066ca:	4b41      	ldr	r3, [pc, #260]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80066d6:	2200      	movs	r2, #0
 80066d8:	2100      	movs	r1, #0
 80066da:	2018      	movs	r0, #24
 80066dc:	f7fa fc1d 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80066e0:	2018      	movs	r0, #24
 80066e2:	f7fa fc36 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80066e6:	2200      	movs	r2, #0
 80066e8:	2100      	movs	r1, #0
 80066ea:	2019      	movs	r0, #25
 80066ec:	f7fa fc15 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80066f0:	2019      	movs	r0, #25
 80066f2:	f7fa fc2e 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80066f6:	2200      	movs	r2, #0
 80066f8:	2100      	movs	r1, #0
 80066fa:	201a      	movs	r0, #26
 80066fc:	f7fa fc0d 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006700:	201a      	movs	r0, #26
 8006702:	f7fa fc26 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	201b      	movs	r0, #27
 800670c:	f7fa fc05 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006710:	201b      	movs	r0, #27
 8006712:	f7fa fc1e 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006716:	e054      	b.n	80067c2 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <HAL_TIM_Base_MspInit+0x13c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d116      	bne.n	8006750 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	4b2a      	ldr	r3, [pc, #168]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	4a29      	ldr	r2, [pc, #164]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 800672c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006730:	6453      	str	r3, [r2, #68]	; 0x44
 8006732:	4b27      	ldr	r3, [pc, #156]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800673e:	2200      	movs	r2, #0
 8006740:	2100      	movs	r1, #0
 8006742:	2018      	movs	r0, #24
 8006744:	f7fa fbe9 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006748:	2018      	movs	r0, #24
 800674a:	f7fa fc02 	bl	8000f52 <HAL_NVIC_EnableIRQ>
}
 800674e:	e038      	b.n	80067c2 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM13)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <HAL_TIM_Base_MspInit+0x140>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d133      	bne.n	80067c2 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 8006764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006768:	6413      	str	r3, [r2, #64]	; 0x40
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	6313      	str	r3, [r2, #48]	; 0x30
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_TIM_Base_MspInit+0x138>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006796:	2302      	movs	r3, #2
 8006798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679a:	2300      	movs	r3, #0
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800679e:	2300      	movs	r3, #0
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80067a2:	2309      	movs	r3, #9
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a6:	f107 031c 	add.w	r3, r7, #28
 80067aa:	4619      	mov	r1, r3
 80067ac:	480b      	ldr	r0, [pc, #44]	; (80067dc <HAL_TIM_Base_MspInit+0x144>)
 80067ae:	f7fa fc0d 	bl	8000fcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80067b2:	2200      	movs	r2, #0
 80067b4:	2100      	movs	r1, #0
 80067b6:	202c      	movs	r0, #44	; 0x2c
 80067b8:	f7fa fbaf 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80067bc:	202c      	movs	r0, #44	; 0x2c
 80067be:	f7fa fbc8 	bl	8000f52 <HAL_NVIC_EnableIRQ>
}
 80067c2:	bf00      	nop
 80067c4:	3730      	adds	r7, #48	; 0x30
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40023800 	.word	0x40023800
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40001c00 	.word	0x40001c00
 80067dc:	40020000 	.word	0x40020000

080067e0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	; 0x28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e8:	f107 0314 	add.w	r3, r7, #20
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM8)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <HAL_TIM_IC_MspInit+0xc4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d14c      	bne.n	800689c <HAL_TIM_IC_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <HAL_TIM_IC_MspInit+0xc8>)
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <HAL_TIM_IC_MspInit+0xc8>)
 800680c:	f043 0302 	orr.w	r3, r3, #2
 8006810:	6453      	str	r3, [r2, #68]	; 0x44
 8006812:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <HAL_TIM_IC_MspInit+0xc8>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <HAL_TIM_IC_MspInit+0xc8>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <HAL_TIM_IC_MspInit+0xc8>)
 8006828:	f043 0304 	orr.w	r3, r3, #4
 800682c:	6313      	str	r3, [r2, #48]	; 0x30
 800682e:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <HAL_TIM_IC_MspInit+0xc8>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800683a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800683e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006840:	2302      	movs	r3, #2
 8006842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006844:	2300      	movs	r3, #0
 8006846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006848:	2300      	movs	r3, #0
 800684a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800684c:	2303      	movs	r3, #3
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	4619      	mov	r1, r3
 8006856:	4815      	ldr	r0, [pc, #84]	; (80068ac <HAL_TIM_IC_MspInit+0xcc>)
 8006858:	f7fa fbb8 	bl	8000fcc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	202b      	movs	r0, #43	; 0x2b
 8006862:	f7fa fb5a 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006866:	202b      	movs	r0, #43	; 0x2b
 8006868:	f7fa fb73 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800686c:	2200      	movs	r2, #0
 800686e:	2100      	movs	r1, #0
 8006870:	202c      	movs	r0, #44	; 0x2c
 8006872:	f7fa fb52 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006876:	202c      	movs	r0, #44	; 0x2c
 8006878:	f7fa fb6b 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800687c:	2200      	movs	r2, #0
 800687e:	2100      	movs	r1, #0
 8006880:	202d      	movs	r0, #45	; 0x2d
 8006882:	f7fa fb4a 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006886:	202d      	movs	r0, #45	; 0x2d
 8006888:	f7fa fb63 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	202e      	movs	r0, #46	; 0x2e
 8006892:	f7fa fb42 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006896:	202e      	movs	r0, #46	; 0x2e
 8006898:	f7fa fb5b 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800689c:	bf00      	nop
 800689e:	3728      	adds	r7, #40	; 0x28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40023800 	.word	0x40023800
 80068ac:	40020800 	.word	0x40020800

080068b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a24      	ldr	r2, [pc, #144]	; (8006960 <HAL_TIM_MspPostInit+0xb0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d11f      	bne.n	8006912 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	4b23      	ldr	r3, [pc, #140]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a22      	ldr	r2, [pc, #136]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 80068dc:	f043 0310 	orr.w	r3, r3, #16
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80068ee:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80068f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f4:	2302      	movs	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068fc:	2300      	movs	r3, #0
 80068fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006900:	2301      	movs	r3, #1
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4619      	mov	r1, r3
 800690a:	4817      	ldr	r0, [pc, #92]	; (8006968 <HAL_TIM_MspPostInit+0xb8>)
 800690c:	f7fa fb5e 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8006910:	e022      	b.n	8006958 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <HAL_TIM_MspPostInit+0xbc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d11d      	bne.n	8006958 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	4a0f      	ldr	r2, [pc, #60]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 8006926:	f043 0310 	orr.w	r3, r3, #16
 800692a:	6313      	str	r3, [r2, #48]	; 0x30
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006938:	2360      	movs	r3, #96	; 0x60
 800693a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693c:	2302      	movs	r3, #2
 800693e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006944:	2300      	movs	r3, #0
 8006946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8006948:	2303      	movs	r3, #3
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800694c:	f107 0314 	add.w	r3, r7, #20
 8006950:	4619      	mov	r1, r3
 8006952:	4805      	ldr	r0, [pc, #20]	; (8006968 <HAL_TIM_MspPostInit+0xb8>)
 8006954:	f7fa fb3a 	bl	8000fcc <HAL_GPIO_Init>
}
 8006958:	bf00      	nop
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40010000 	.word	0x40010000
 8006964:	40023800 	.word	0x40023800
 8006968:	40021000 	.word	0x40021000
 800696c:	40014000 	.word	0x40014000

08006970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006978:	f107 0314 	add.w	r3, r7, #20
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1d      	ldr	r2, [pc, #116]	; (8006a04 <HAL_UART_MspInit+0x94>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d134      	bne.n	80069fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <HAL_UART_MspInit+0x98>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	4a1b      	ldr	r2, [pc, #108]	; (8006a08 <HAL_UART_MspInit+0x98>)
 800699c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a0:	6413      	str	r3, [r2, #64]	; 0x40
 80069a2:	4b19      	ldr	r3, [pc, #100]	; (8006a08 <HAL_UART_MspInit+0x98>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <HAL_UART_MspInit+0x98>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <HAL_UART_MspInit+0x98>)
 80069b8:	f043 0308 	orr.w	r3, r3, #8
 80069bc:	6313      	str	r3, [r2, #48]	; 0x30
 80069be:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <HAL_UART_MspInit+0x98>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d0:	2302      	movs	r3, #2
 80069d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069d4:	2301      	movs	r3, #1
 80069d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d8:	2303      	movs	r3, #3
 80069da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069dc:	2307      	movs	r3, #7
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069e0:	f107 0314 	add.w	r3, r7, #20
 80069e4:	4619      	mov	r1, r3
 80069e6:	4809      	ldr	r0, [pc, #36]	; (8006a0c <HAL_UART_MspInit+0x9c>)
 80069e8:	f7fa faf0 	bl	8000fcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80069ec:	2200      	movs	r2, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	2027      	movs	r0, #39	; 0x27
 80069f2:	f7fa fa92 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80069f6:	2027      	movs	r0, #39	; 0x27
 80069f8:	f7fa faab 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80069fc:	bf00      	nop
 80069fe:	3728      	adds	r7, #40	; 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40004800 	.word	0x40004800
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	40020c00 	.word	0x40020c00

08006a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	609a      	str	r2, [r3, #8]
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a30:	d132      	bne.n	8006a98 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a32:	2300      	movs	r3, #0
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a3c:	f043 0301 	orr.w	r3, r3, #1
 8006a40:	6313      	str	r3, [r2, #48]	; 0x30
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a54:	2302      	movs	r3, #2
 8006a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a60:	230a      	movs	r3, #10
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a64:	f107 0314 	add.w	r3, r7, #20
 8006a68:	4619      	mov	r1, r3
 8006a6a:	480e      	ldr	r0, [pc, #56]	; (8006aa4 <HAL_PCD_MspInit+0x94>)
 8006a6c:	f7fa faae 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a74:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	6353      	str	r3, [r2, #52]	; 0x34
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	4a06      	ldr	r2, [pc, #24]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <HAL_PCD_MspInit+0x90>)
 8006a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006a98:	bf00      	nop
 8006a9a:	3728      	adds	r7, #40	; 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	40020000 	.word	0x40020000

08006aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006aac:	bf00      	nop
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006aba:	e7fe      	b.n	8006aba <HardFault_Handler+0x4>

08006abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ac0:	e7fe      	b.n	8006ac0 <MemManage_Handler+0x4>

08006ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ac6:	e7fe      	b.n	8006ac6 <BusFault_Handler+0x4>

08006ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006acc:	e7fe      	b.n	8006acc <UsageFault_Handler+0x4>

08006ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ad2:	bf00      	nop
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006aea:	b480      	push	{r7}
 8006aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006afc:	f7f9 fd92 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b00:	bf00      	nop
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b08:	4803      	ldr	r0, [pc, #12]	; (8006b18 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8006b0a:	f7fc fb2f 	bl	800316c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8006b0e:	4803      	ldr	r0, [pc, #12]	; (8006b1c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8006b10:	f7fc fb2c 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006b14:	bf00      	nop
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200006f4 	.word	0x200006f4
 8006b1c:	20000734 	.word	0x20000734

08006b20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b24:	4802      	ldr	r0, [pc, #8]	; (8006b30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006b26:	f7fc fb21 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006b2a:	bf00      	nop
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200006f4 	.word	0x200006f4

08006b34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b38:	4802      	ldr	r0, [pc, #8]	; (8006b44 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006b3a:	f7fc fb17 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006b3e:	bf00      	nop
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200006f4 	.word	0x200006f4

08006b48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b4c:	4802      	ldr	r0, [pc, #8]	; (8006b58 <TIM1_CC_IRQHandler+0x10>)
 8006b4e:	f7fc fb0d 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200006f4 	.word	0x200006f4

08006b5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006b60:	4802      	ldr	r0, [pc, #8]	; (8006b6c <SPI2_IRQHandler+0x10>)
 8006b62:	f7fb fed7 	bl	8002914 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000009c 	.word	0x2000009c

08006b70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006b74:	4802      	ldr	r0, [pc, #8]	; (8006b80 <USART3_IRQHandler+0x10>)
 8006b76:	f7fd fca5 	bl	80044c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000134 	.word	0x20000134

08006b84 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006b88:	4802      	ldr	r0, [pc, #8]	; (8006b94 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8006b8a:	f7fc faef 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200000f4 	.word	0x200000f4

08006b98 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006b9c:	4803      	ldr	r0, [pc, #12]	; (8006bac <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006b9e:	f7fc fae5 	bl	800316c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006ba2:	4803      	ldr	r0, [pc, #12]	; (8006bb0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006ba4:	f7fc fae2 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006ba8:	bf00      	nop
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200000f4 	.word	0x200000f4
 8006bb0:	200006b4 	.word	0x200006b4

08006bb4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006bb8:	4802      	ldr	r0, [pc, #8]	; (8006bc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8006bba:	f7fc fad7 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006bbe:	bf00      	nop
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	200000f4 	.word	0x200000f4

08006bc8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006bcc:	4802      	ldr	r0, [pc, #8]	; (8006bd8 <TIM8_CC_IRQHandler+0x10>)
 8006bce:	f7fc facd 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8006bd2:	bf00      	nop
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200000f4 	.word	0x200000f4

08006bdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <_sbrk+0x50>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <_sbrk+0x16>
		heap_end = &end;
 8006bec:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <_sbrk+0x50>)
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <_sbrk+0x54>)
 8006bf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <_sbrk+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <_sbrk+0x50>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4413      	add	r3, r2
 8006c00:	466a      	mov	r2, sp
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d907      	bls.n	8006c16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006c06:	f000 f855 	bl	8006cb4 <__errno>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c14:	e006      	b.n	8006c24 <_sbrk+0x48>
	}

	heap_end += incr;
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <_sbrk+0x50>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	4a03      	ldr	r2, [pc, #12]	; (8006c2c <_sbrk+0x50>)
 8006c20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006c22:	68fb      	ldr	r3, [r7, #12]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	2000008c 	.word	0x2000008c
 8006c30:	200007a0 	.word	0x200007a0

08006c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c38:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <SystemInit+0x28>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <SystemInit+0x28>)
 8006c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <SystemInit+0x28>)
 8006c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8006c50:	bf00      	nop
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	e000ed00 	.word	0xe000ed00

08006c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006c66:	e003      	b.n	8006c70 <LoopCopyDataInit>

08006c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006c6e:	3104      	adds	r1, #4

08006c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006c70:	480b      	ldr	r0, [pc, #44]	; (8006ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006c78:	d3f6      	bcc.n	8006c68 <CopyDataInit>
  ldr  r2, =_sbss
 8006c7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006c7c:	e002      	b.n	8006c84 <LoopFillZerobss>

08006c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006c80:	f842 3b04 	str.w	r3, [r2], #4

08006c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006c84:	4b09      	ldr	r3, [pc, #36]	; (8006cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006c88:	d3f9      	bcc.n	8006c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c8a:	f7ff ffd3 	bl	8006c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c8e:	f000 f817 	bl	8006cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c92:	f7fe fcd9 	bl	8005648 <main>
  bx  lr    
 8006c96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006c98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006c9c:	080076c4 	.word	0x080076c4
  ldr  r0, =_sdata
 8006ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006ca4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8006ca8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8006cac:	200007a0 	.word	0x200007a0

08006cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cb0:	e7fe      	b.n	8006cb0 <ADC_IRQHandler>
	...

08006cb4 <__errno>:
 8006cb4:	4b01      	ldr	r3, [pc, #4]	; (8006cbc <__errno+0x8>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	2000000c 	.word	0x2000000c

08006cc0 <__libc_init_array>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4e0d      	ldr	r6, [pc, #52]	; (8006cf8 <__libc_init_array+0x38>)
 8006cc4:	4c0d      	ldr	r4, [pc, #52]	; (8006cfc <__libc_init_array+0x3c>)
 8006cc6:	1ba4      	subs	r4, r4, r6
 8006cc8:	10a4      	asrs	r4, r4, #2
 8006cca:	2500      	movs	r5, #0
 8006ccc:	42a5      	cmp	r5, r4
 8006cce:	d109      	bne.n	8006ce4 <__libc_init_array+0x24>
 8006cd0:	4e0b      	ldr	r6, [pc, #44]	; (8006d00 <__libc_init_array+0x40>)
 8006cd2:	4c0c      	ldr	r4, [pc, #48]	; (8006d04 <__libc_init_array+0x44>)
 8006cd4:	f000 fca2 	bl	800761c <_init>
 8006cd8:	1ba4      	subs	r4, r4, r6
 8006cda:	10a4      	asrs	r4, r4, #2
 8006cdc:	2500      	movs	r5, #0
 8006cde:	42a5      	cmp	r5, r4
 8006ce0:	d105      	bne.n	8006cee <__libc_init_array+0x2e>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce8:	4798      	blx	r3
 8006cea:	3501      	adds	r5, #1
 8006cec:	e7ee      	b.n	8006ccc <__libc_init_array+0xc>
 8006cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cf2:	4798      	blx	r3
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	e7f2      	b.n	8006cde <__libc_init_array+0x1e>
 8006cf8:	080076bc 	.word	0x080076bc
 8006cfc:	080076bc 	.word	0x080076bc
 8006d00:	080076bc 	.word	0x080076bc
 8006d04:	080076c0 	.word	0x080076c0

08006d08 <__itoa>:
 8006d08:	1e93      	subs	r3, r2, #2
 8006d0a:	2b22      	cmp	r3, #34	; 0x22
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	460c      	mov	r4, r1
 8006d10:	d904      	bls.n	8006d1c <__itoa+0x14>
 8006d12:	2300      	movs	r3, #0
 8006d14:	700b      	strb	r3, [r1, #0]
 8006d16:	461c      	mov	r4, r3
 8006d18:	4620      	mov	r0, r4
 8006d1a:	bd10      	pop	{r4, pc}
 8006d1c:	2a0a      	cmp	r2, #10
 8006d1e:	d109      	bne.n	8006d34 <__itoa+0x2c>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	da07      	bge.n	8006d34 <__itoa+0x2c>
 8006d24:	232d      	movs	r3, #45	; 0x2d
 8006d26:	700b      	strb	r3, [r1, #0]
 8006d28:	4240      	negs	r0, r0
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4421      	add	r1, r4
 8006d2e:	f000 f851 	bl	8006dd4 <__utoa>
 8006d32:	e7f1      	b.n	8006d18 <__itoa+0x10>
 8006d34:	2100      	movs	r1, #0
 8006d36:	e7f9      	b.n	8006d2c <__itoa+0x24>

08006d38 <itoa>:
 8006d38:	f7ff bfe6 	b.w	8006d08 <__itoa>

08006d3c <memset>:
 8006d3c:	4402      	add	r2, r0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d100      	bne.n	8006d46 <memset+0xa>
 8006d44:	4770      	bx	lr
 8006d46:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4a:	e7f9      	b.n	8006d40 <memset+0x4>

08006d4c <siprintf>:
 8006d4c:	b40e      	push	{r1, r2, r3}
 8006d4e:	b500      	push	{lr}
 8006d50:	b09c      	sub	sp, #112	; 0x70
 8006d52:	ab1d      	add	r3, sp, #116	; 0x74
 8006d54:	9002      	str	r0, [sp, #8]
 8006d56:	9006      	str	r0, [sp, #24]
 8006d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <siprintf+0x38>)
 8006d5e:	9107      	str	r1, [sp, #28]
 8006d60:	9104      	str	r1, [sp, #16]
 8006d62:	4909      	ldr	r1, [pc, #36]	; (8006d88 <siprintf+0x3c>)
 8006d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	a902      	add	r1, sp, #8
 8006d70:	f000 f8c8 	bl	8006f04 <_svfiprintf_r>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	b01c      	add	sp, #112	; 0x70
 8006d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d80:	b003      	add	sp, #12
 8006d82:	4770      	bx	lr
 8006d84:	2000000c 	.word	0x2000000c
 8006d88:	ffff0208 	.word	0xffff0208

08006d8c <strcat>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	4603      	mov	r3, r0
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	1c5c      	adds	r4, r3, #1
 8006d94:	b93a      	cbnz	r2, 8006da6 <strcat+0x1a>
 8006d96:	3b01      	subs	r3, #1
 8006d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d1f9      	bne.n	8006d98 <strcat+0xc>
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	4623      	mov	r3, r4
 8006da8:	e7f2      	b.n	8006d90 <strcat+0x4>

08006daa <strncat>:
 8006daa:	b530      	push	{r4, r5, lr}
 8006dac:	4603      	mov	r3, r0
 8006dae:	781c      	ldrb	r4, [r3, #0]
 8006db0:	1c5d      	adds	r5, r3, #1
 8006db2:	b944      	cbnz	r4, 8006dc6 <strncat+0x1c>
 8006db4:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8006db8:	d304      	bcc.n	8006dc4 <strncat+0x1a>
 8006dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dbe:	f803 4b01 	strb.w	r4, [r3], #1
 8006dc2:	b914      	cbnz	r4, 8006dca <strncat+0x20>
 8006dc4:	bd30      	pop	{r4, r5, pc}
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	e7f1      	b.n	8006dae <strncat+0x4>
 8006dca:	2a00      	cmp	r2, #0
 8006dcc:	d1f2      	bne.n	8006db4 <strncat+0xa>
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	e7f0      	b.n	8006db4 <strncat+0xa>
	...

08006dd4 <__utoa>:
 8006dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dd6:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <__utoa+0x78>)
 8006dd8:	b08b      	sub	sp, #44	; 0x2c
 8006dda:	4605      	mov	r5, r0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	466e      	mov	r6, sp
 8006de0:	f103 0c20 	add.w	ip, r3, #32
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	6859      	ldr	r1, [r3, #4]
 8006de8:	4637      	mov	r7, r6
 8006dea:	c703      	stmia	r7!, {r0, r1}
 8006dec:	3308      	adds	r3, #8
 8006dee:	4563      	cmp	r3, ip
 8006df0:	463e      	mov	r6, r7
 8006df2:	d1f7      	bne.n	8006de4 <__utoa+0x10>
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	791b      	ldrb	r3, [r3, #4]
 8006df8:	713b      	strb	r3, [r7, #4]
 8006dfa:	1e93      	subs	r3, r2, #2
 8006dfc:	2b22      	cmp	r3, #34	; 0x22
 8006dfe:	6038      	str	r0, [r7, #0]
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	d904      	bls.n	8006e10 <__utoa+0x3c>
 8006e06:	7023      	strb	r3, [r4, #0]
 8006e08:	461c      	mov	r4, r3
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	b00b      	add	sp, #44	; 0x2c
 8006e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e10:	1e66      	subs	r6, r4, #1
 8006e12:	fbb5 f0f2 	udiv	r0, r5, r2
 8006e16:	af0a      	add	r7, sp, #40	; 0x28
 8006e18:	fb02 5510 	mls	r5, r2, r0, r5
 8006e1c:	443d      	add	r5, r7
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8006e24:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006e28:	4605      	mov	r5, r0
 8006e2a:	b968      	cbnz	r0, 8006e48 <__utoa+0x74>
 8006e2c:	5460      	strb	r0, [r4, r1]
 8006e2e:	4423      	add	r3, r4
 8006e30:	4622      	mov	r2, r4
 8006e32:	1b19      	subs	r1, r3, r4
 8006e34:	1b10      	subs	r0, r2, r4
 8006e36:	4281      	cmp	r1, r0
 8006e38:	dde7      	ble.n	8006e0a <__utoa+0x36>
 8006e3a:	7811      	ldrb	r1, [r2, #0]
 8006e3c:	7818      	ldrb	r0, [r3, #0]
 8006e3e:	f802 0b01 	strb.w	r0, [r2], #1
 8006e42:	f803 1901 	strb.w	r1, [r3], #-1
 8006e46:	e7f4      	b.n	8006e32 <__utoa+0x5e>
 8006e48:	460b      	mov	r3, r1
 8006e4a:	e7e2      	b.n	8006e12 <__utoa+0x3e>
 8006e4c:	0800765c 	.word	0x0800765c

08006e50 <__ssputs_r>:
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	688e      	ldr	r6, [r1, #8]
 8006e56:	429e      	cmp	r6, r3
 8006e58:	4682      	mov	sl, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	4690      	mov	r8, r2
 8006e5e:	4699      	mov	r9, r3
 8006e60:	d837      	bhi.n	8006ed2 <__ssputs_r+0x82>
 8006e62:	898a      	ldrh	r2, [r1, #12]
 8006e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e68:	d031      	beq.n	8006ece <__ssputs_r+0x7e>
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	6909      	ldr	r1, [r1, #16]
 8006e6e:	1a6f      	subs	r7, r5, r1
 8006e70:	6965      	ldr	r5, [r4, #20]
 8006e72:	2302      	movs	r3, #2
 8006e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e78:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e7c:	f109 0301 	add.w	r3, r9, #1
 8006e80:	443b      	add	r3, r7
 8006e82:	429d      	cmp	r5, r3
 8006e84:	bf38      	it	cc
 8006e86:	461d      	movcc	r5, r3
 8006e88:	0553      	lsls	r3, r2, #21
 8006e8a:	d530      	bpl.n	8006eee <__ssputs_r+0x9e>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f000 fb2b 	bl	80074e8 <_malloc_r>
 8006e92:	4606      	mov	r6, r0
 8006e94:	b950      	cbnz	r0, 8006eac <__ssputs_r+0x5c>
 8006e96:	230c      	movs	r3, #12
 8006e98:	f8ca 3000 	str.w	r3, [sl]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eac:	463a      	mov	r2, r7
 8006eae:	6921      	ldr	r1, [r4, #16]
 8006eb0:	f000 faa8 	bl	8007404 <memcpy>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	6126      	str	r6, [r4, #16]
 8006ec2:	6165      	str	r5, [r4, #20]
 8006ec4:	443e      	add	r6, r7
 8006ec6:	1bed      	subs	r5, r5, r7
 8006ec8:	6026      	str	r6, [r4, #0]
 8006eca:	60a5      	str	r5, [r4, #8]
 8006ecc:	464e      	mov	r6, r9
 8006ece:	454e      	cmp	r6, r9
 8006ed0:	d900      	bls.n	8006ed4 <__ssputs_r+0x84>
 8006ed2:	464e      	mov	r6, r9
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	6820      	ldr	r0, [r4, #0]
 8006eda:	f000 fa9e 	bl	800741a <memmove>
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	1b9b      	subs	r3, r3, r6
 8006ee2:	60a3      	str	r3, [r4, #8]
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	441e      	add	r6, r3
 8006ee8:	6026      	str	r6, [r4, #0]
 8006eea:	2000      	movs	r0, #0
 8006eec:	e7dc      	b.n	8006ea8 <__ssputs_r+0x58>
 8006eee:	462a      	mov	r2, r5
 8006ef0:	f000 fb54 	bl	800759c <_realloc_r>
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d1e2      	bne.n	8006ec0 <__ssputs_r+0x70>
 8006efa:	6921      	ldr	r1, [r4, #16]
 8006efc:	4650      	mov	r0, sl
 8006efe:	f000 faa5 	bl	800744c <_free_r>
 8006f02:	e7c8      	b.n	8006e96 <__ssputs_r+0x46>

08006f04 <_svfiprintf_r>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	461d      	mov	r5, r3
 8006f0a:	898b      	ldrh	r3, [r1, #12]
 8006f0c:	061f      	lsls	r7, r3, #24
 8006f0e:	b09d      	sub	sp, #116	; 0x74
 8006f10:	4680      	mov	r8, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	4616      	mov	r6, r2
 8006f16:	d50f      	bpl.n	8006f38 <_svfiprintf_r+0x34>
 8006f18:	690b      	ldr	r3, [r1, #16]
 8006f1a:	b96b      	cbnz	r3, 8006f38 <_svfiprintf_r+0x34>
 8006f1c:	2140      	movs	r1, #64	; 0x40
 8006f1e:	f000 fae3 	bl	80074e8 <_malloc_r>
 8006f22:	6020      	str	r0, [r4, #0]
 8006f24:	6120      	str	r0, [r4, #16]
 8006f26:	b928      	cbnz	r0, 8006f34 <_svfiprintf_r+0x30>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	f8c8 3000 	str.w	r3, [r8]
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f32:	e0c8      	b.n	80070c6 <_svfiprintf_r+0x1c2>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	6163      	str	r3, [r4, #20]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f42:	2330      	movs	r3, #48	; 0x30
 8006f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f48:	9503      	str	r5, [sp, #12]
 8006f4a:	f04f 0b01 	mov.w	fp, #1
 8006f4e:	4637      	mov	r7, r6
 8006f50:	463d      	mov	r5, r7
 8006f52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f56:	b10b      	cbz	r3, 8006f5c <_svfiprintf_r+0x58>
 8006f58:	2b25      	cmp	r3, #37	; 0x25
 8006f5a:	d13e      	bne.n	8006fda <_svfiprintf_r+0xd6>
 8006f5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f60:	d00b      	beq.n	8006f7a <_svfiprintf_r+0x76>
 8006f62:	4653      	mov	r3, sl
 8006f64:	4632      	mov	r2, r6
 8006f66:	4621      	mov	r1, r4
 8006f68:	4640      	mov	r0, r8
 8006f6a:	f7ff ff71 	bl	8006e50 <__ssputs_r>
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f000 80a4 	beq.w	80070bc <_svfiprintf_r+0x1b8>
 8006f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f76:	4453      	add	r3, sl
 8006f78:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7a:	783b      	ldrb	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 809d 	beq.w	80070bc <_svfiprintf_r+0x1b8>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	9307      	str	r3, [sp, #28]
 8006f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f94:	931a      	str	r3, [sp, #104]	; 0x68
 8006f96:	462f      	mov	r7, r5
 8006f98:	2205      	movs	r2, #5
 8006f9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f9e:	4850      	ldr	r0, [pc, #320]	; (80070e0 <_svfiprintf_r+0x1dc>)
 8006fa0:	f7f9 f91e 	bl	80001e0 <memchr>
 8006fa4:	9b04      	ldr	r3, [sp, #16]
 8006fa6:	b9d0      	cbnz	r0, 8006fde <_svfiprintf_r+0xda>
 8006fa8:	06d9      	lsls	r1, r3, #27
 8006faa:	bf44      	itt	mi
 8006fac:	2220      	movmi	r2, #32
 8006fae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fb2:	071a      	lsls	r2, r3, #28
 8006fb4:	bf44      	itt	mi
 8006fb6:	222b      	movmi	r2, #43	; 0x2b
 8006fb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fbc:	782a      	ldrb	r2, [r5, #0]
 8006fbe:	2a2a      	cmp	r2, #42	; 0x2a
 8006fc0:	d015      	beq.n	8006fee <_svfiprintf_r+0xea>
 8006fc2:	9a07      	ldr	r2, [sp, #28]
 8006fc4:	462f      	mov	r7, r5
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	250a      	movs	r5, #10
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd0:	3b30      	subs	r3, #48	; 0x30
 8006fd2:	2b09      	cmp	r3, #9
 8006fd4:	d94d      	bls.n	8007072 <_svfiprintf_r+0x16e>
 8006fd6:	b1b8      	cbz	r0, 8007008 <_svfiprintf_r+0x104>
 8006fd8:	e00f      	b.n	8006ffa <_svfiprintf_r+0xf6>
 8006fda:	462f      	mov	r7, r5
 8006fdc:	e7b8      	b.n	8006f50 <_svfiprintf_r+0x4c>
 8006fde:	4a40      	ldr	r2, [pc, #256]	; (80070e0 <_svfiprintf_r+0x1dc>)
 8006fe0:	1a80      	subs	r0, r0, r2
 8006fe2:	fa0b f000 	lsl.w	r0, fp, r0
 8006fe6:	4318      	orrs	r0, r3
 8006fe8:	9004      	str	r0, [sp, #16]
 8006fea:	463d      	mov	r5, r7
 8006fec:	e7d3      	b.n	8006f96 <_svfiprintf_r+0x92>
 8006fee:	9a03      	ldr	r2, [sp, #12]
 8006ff0:	1d11      	adds	r1, r2, #4
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	9103      	str	r1, [sp, #12]
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	db01      	blt.n	8006ffe <_svfiprintf_r+0xfa>
 8006ffa:	9207      	str	r2, [sp, #28]
 8006ffc:	e004      	b.n	8007008 <_svfiprintf_r+0x104>
 8006ffe:	4252      	negs	r2, r2
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	9207      	str	r2, [sp, #28]
 8007006:	9304      	str	r3, [sp, #16]
 8007008:	783b      	ldrb	r3, [r7, #0]
 800700a:	2b2e      	cmp	r3, #46	; 0x2e
 800700c:	d10c      	bne.n	8007028 <_svfiprintf_r+0x124>
 800700e:	787b      	ldrb	r3, [r7, #1]
 8007010:	2b2a      	cmp	r3, #42	; 0x2a
 8007012:	d133      	bne.n	800707c <_svfiprintf_r+0x178>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	1d1a      	adds	r2, r3, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	9203      	str	r2, [sp, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	bfb8      	it	lt
 8007020:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007024:	3702      	adds	r7, #2
 8007026:	9305      	str	r3, [sp, #20]
 8007028:	4d2e      	ldr	r5, [pc, #184]	; (80070e4 <_svfiprintf_r+0x1e0>)
 800702a:	7839      	ldrb	r1, [r7, #0]
 800702c:	2203      	movs	r2, #3
 800702e:	4628      	mov	r0, r5
 8007030:	f7f9 f8d6 	bl	80001e0 <memchr>
 8007034:	b138      	cbz	r0, 8007046 <_svfiprintf_r+0x142>
 8007036:	2340      	movs	r3, #64	; 0x40
 8007038:	1b40      	subs	r0, r0, r5
 800703a:	fa03 f000 	lsl.w	r0, r3, r0
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	4303      	orrs	r3, r0
 8007042:	3701      	adds	r7, #1
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	7839      	ldrb	r1, [r7, #0]
 8007048:	4827      	ldr	r0, [pc, #156]	; (80070e8 <_svfiprintf_r+0x1e4>)
 800704a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704e:	2206      	movs	r2, #6
 8007050:	1c7e      	adds	r6, r7, #1
 8007052:	f7f9 f8c5 	bl	80001e0 <memchr>
 8007056:	2800      	cmp	r0, #0
 8007058:	d038      	beq.n	80070cc <_svfiprintf_r+0x1c8>
 800705a:	4b24      	ldr	r3, [pc, #144]	; (80070ec <_svfiprintf_r+0x1e8>)
 800705c:	bb13      	cbnz	r3, 80070a4 <_svfiprintf_r+0x1a0>
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	3307      	adds	r3, #7
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	3308      	adds	r3, #8
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706c:	444b      	add	r3, r9
 800706e:	9309      	str	r3, [sp, #36]	; 0x24
 8007070:	e76d      	b.n	8006f4e <_svfiprintf_r+0x4a>
 8007072:	fb05 3202 	mla	r2, r5, r2, r3
 8007076:	2001      	movs	r0, #1
 8007078:	460f      	mov	r7, r1
 800707a:	e7a6      	b.n	8006fca <_svfiprintf_r+0xc6>
 800707c:	2300      	movs	r3, #0
 800707e:	3701      	adds	r7, #1
 8007080:	9305      	str	r3, [sp, #20]
 8007082:	4619      	mov	r1, r3
 8007084:	250a      	movs	r5, #10
 8007086:	4638      	mov	r0, r7
 8007088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800708c:	3a30      	subs	r2, #48	; 0x30
 800708e:	2a09      	cmp	r2, #9
 8007090:	d903      	bls.n	800709a <_svfiprintf_r+0x196>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0c8      	beq.n	8007028 <_svfiprintf_r+0x124>
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	e7c6      	b.n	8007028 <_svfiprintf_r+0x124>
 800709a:	fb05 2101 	mla	r1, r5, r1, r2
 800709e:	2301      	movs	r3, #1
 80070a0:	4607      	mov	r7, r0
 80070a2:	e7f0      	b.n	8007086 <_svfiprintf_r+0x182>
 80070a4:	ab03      	add	r3, sp, #12
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4622      	mov	r2, r4
 80070aa:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <_svfiprintf_r+0x1ec>)
 80070ac:	a904      	add	r1, sp, #16
 80070ae:	4640      	mov	r0, r8
 80070b0:	f3af 8000 	nop.w
 80070b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80070b8:	4681      	mov	r9, r0
 80070ba:	d1d6      	bne.n	800706a <_svfiprintf_r+0x166>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	065b      	lsls	r3, r3, #25
 80070c0:	f53f af35 	bmi.w	8006f2e <_svfiprintf_r+0x2a>
 80070c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c6:	b01d      	add	sp, #116	; 0x74
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	ab03      	add	r3, sp, #12
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4622      	mov	r2, r4
 80070d2:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <_svfiprintf_r+0x1ec>)
 80070d4:	a904      	add	r1, sp, #16
 80070d6:	4640      	mov	r0, r8
 80070d8:	f000 f882 	bl	80071e0 <_printf_i>
 80070dc:	e7ea      	b.n	80070b4 <_svfiprintf_r+0x1b0>
 80070de:	bf00      	nop
 80070e0:	08007681 	.word	0x08007681
 80070e4:	08007687 	.word	0x08007687
 80070e8:	0800768b 	.word	0x0800768b
 80070ec:	00000000 	.word	0x00000000
 80070f0:	08006e51 	.word	0x08006e51

080070f4 <_printf_common>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	4691      	mov	r9, r2
 80070fa:	461f      	mov	r7, r3
 80070fc:	688a      	ldr	r2, [r1, #8]
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007104:	4293      	cmp	r3, r2
 8007106:	bfb8      	it	lt
 8007108:	4613      	movlt	r3, r2
 800710a:	f8c9 3000 	str.w	r3, [r9]
 800710e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007112:	4606      	mov	r6, r0
 8007114:	460c      	mov	r4, r1
 8007116:	b112      	cbz	r2, 800711e <_printf_common+0x2a>
 8007118:	3301      	adds	r3, #1
 800711a:	f8c9 3000 	str.w	r3, [r9]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	0699      	lsls	r1, r3, #26
 8007122:	bf42      	ittt	mi
 8007124:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007128:	3302      	addmi	r3, #2
 800712a:	f8c9 3000 	strmi.w	r3, [r9]
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	f015 0506 	ands.w	r5, r5, #6
 8007134:	d107      	bne.n	8007146 <_printf_common+0x52>
 8007136:	f104 0a19 	add.w	sl, r4, #25
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	f8d9 2000 	ldr.w	r2, [r9]
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	42ab      	cmp	r3, r5
 8007144:	dc28      	bgt.n	8007198 <_printf_common+0xa4>
 8007146:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	3300      	adds	r3, #0
 800714e:	bf18      	it	ne
 8007150:	2301      	movne	r3, #1
 8007152:	0692      	lsls	r2, r2, #26
 8007154:	d42d      	bmi.n	80071b2 <_printf_common+0xbe>
 8007156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800715a:	4639      	mov	r1, r7
 800715c:	4630      	mov	r0, r6
 800715e:	47c0      	blx	r8
 8007160:	3001      	adds	r0, #1
 8007162:	d020      	beq.n	80071a6 <_printf_common+0xb2>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	68e5      	ldr	r5, [r4, #12]
 8007168:	f8d9 2000 	ldr.w	r2, [r9]
 800716c:	f003 0306 	and.w	r3, r3, #6
 8007170:	2b04      	cmp	r3, #4
 8007172:	bf08      	it	eq
 8007174:	1aad      	subeq	r5, r5, r2
 8007176:	68a3      	ldr	r3, [r4, #8]
 8007178:	6922      	ldr	r2, [r4, #16]
 800717a:	bf0c      	ite	eq
 800717c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007180:	2500      	movne	r5, #0
 8007182:	4293      	cmp	r3, r2
 8007184:	bfc4      	itt	gt
 8007186:	1a9b      	subgt	r3, r3, r2
 8007188:	18ed      	addgt	r5, r5, r3
 800718a:	f04f 0900 	mov.w	r9, #0
 800718e:	341a      	adds	r4, #26
 8007190:	454d      	cmp	r5, r9
 8007192:	d11a      	bne.n	80071ca <_printf_common+0xd6>
 8007194:	2000      	movs	r0, #0
 8007196:	e008      	b.n	80071aa <_printf_common+0xb6>
 8007198:	2301      	movs	r3, #1
 800719a:	4652      	mov	r2, sl
 800719c:	4639      	mov	r1, r7
 800719e:	4630      	mov	r0, r6
 80071a0:	47c0      	blx	r8
 80071a2:	3001      	adds	r0, #1
 80071a4:	d103      	bne.n	80071ae <_printf_common+0xba>
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ae:	3501      	adds	r5, #1
 80071b0:	e7c3      	b.n	800713a <_printf_common+0x46>
 80071b2:	18e1      	adds	r1, r4, r3
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	2030      	movs	r0, #48	; 0x30
 80071b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071bc:	4422      	add	r2, r4
 80071be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c6:	3302      	adds	r3, #2
 80071c8:	e7c5      	b.n	8007156 <_printf_common+0x62>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4622      	mov	r2, r4
 80071ce:	4639      	mov	r1, r7
 80071d0:	4630      	mov	r0, r6
 80071d2:	47c0      	blx	r8
 80071d4:	3001      	adds	r0, #1
 80071d6:	d0e6      	beq.n	80071a6 <_printf_common+0xb2>
 80071d8:	f109 0901 	add.w	r9, r9, #1
 80071dc:	e7d8      	b.n	8007190 <_printf_common+0x9c>
	...

080071e0 <_printf_i>:
 80071e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071e8:	460c      	mov	r4, r1
 80071ea:	7e09      	ldrb	r1, [r1, #24]
 80071ec:	b085      	sub	sp, #20
 80071ee:	296e      	cmp	r1, #110	; 0x6e
 80071f0:	4617      	mov	r7, r2
 80071f2:	4606      	mov	r6, r0
 80071f4:	4698      	mov	r8, r3
 80071f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f8:	f000 80b3 	beq.w	8007362 <_printf_i+0x182>
 80071fc:	d822      	bhi.n	8007244 <_printf_i+0x64>
 80071fe:	2963      	cmp	r1, #99	; 0x63
 8007200:	d036      	beq.n	8007270 <_printf_i+0x90>
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x3a>
 8007204:	2900      	cmp	r1, #0
 8007206:	f000 80b9 	beq.w	800737c <_printf_i+0x19c>
 800720a:	2958      	cmp	r1, #88	; 0x58
 800720c:	f000 8083 	beq.w	8007316 <_printf_i+0x136>
 8007210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007214:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007218:	e032      	b.n	8007280 <_printf_i+0xa0>
 800721a:	2964      	cmp	r1, #100	; 0x64
 800721c:	d001      	beq.n	8007222 <_printf_i+0x42>
 800721e:	2969      	cmp	r1, #105	; 0x69
 8007220:	d1f6      	bne.n	8007210 <_printf_i+0x30>
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	6813      	ldr	r3, [r2, #0]
 8007226:	0605      	lsls	r5, r0, #24
 8007228:	f103 0104 	add.w	r1, r3, #4
 800722c:	d52a      	bpl.n	8007284 <_printf_i+0xa4>
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6011      	str	r1, [r2, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	da03      	bge.n	800723e <_printf_i+0x5e>
 8007236:	222d      	movs	r2, #45	; 0x2d
 8007238:	425b      	negs	r3, r3
 800723a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800723e:	486f      	ldr	r0, [pc, #444]	; (80073fc <_printf_i+0x21c>)
 8007240:	220a      	movs	r2, #10
 8007242:	e039      	b.n	80072b8 <_printf_i+0xd8>
 8007244:	2973      	cmp	r1, #115	; 0x73
 8007246:	f000 809d 	beq.w	8007384 <_printf_i+0x1a4>
 800724a:	d808      	bhi.n	800725e <_printf_i+0x7e>
 800724c:	296f      	cmp	r1, #111	; 0x6f
 800724e:	d020      	beq.n	8007292 <_printf_i+0xb2>
 8007250:	2970      	cmp	r1, #112	; 0x70
 8007252:	d1dd      	bne.n	8007210 <_printf_i+0x30>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	f043 0320 	orr.w	r3, r3, #32
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	e003      	b.n	8007266 <_printf_i+0x86>
 800725e:	2975      	cmp	r1, #117	; 0x75
 8007260:	d017      	beq.n	8007292 <_printf_i+0xb2>
 8007262:	2978      	cmp	r1, #120	; 0x78
 8007264:	d1d4      	bne.n	8007210 <_printf_i+0x30>
 8007266:	2378      	movs	r3, #120	; 0x78
 8007268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800726c:	4864      	ldr	r0, [pc, #400]	; (8007400 <_printf_i+0x220>)
 800726e:	e055      	b.n	800731c <_printf_i+0x13c>
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	1d19      	adds	r1, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6011      	str	r1, [r2, #0]
 8007278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800727c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007280:	2301      	movs	r3, #1
 8007282:	e08c      	b.n	800739e <_printf_i+0x1be>
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6011      	str	r1, [r2, #0]
 8007288:	f010 0f40 	tst.w	r0, #64	; 0x40
 800728c:	bf18      	it	ne
 800728e:	b21b      	sxthne	r3, r3
 8007290:	e7cf      	b.n	8007232 <_printf_i+0x52>
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	6825      	ldr	r5, [r4, #0]
 8007296:	1d18      	adds	r0, r3, #4
 8007298:	6010      	str	r0, [r2, #0]
 800729a:	0628      	lsls	r0, r5, #24
 800729c:	d501      	bpl.n	80072a2 <_printf_i+0xc2>
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	e002      	b.n	80072a8 <_printf_i+0xc8>
 80072a2:	0668      	lsls	r0, r5, #25
 80072a4:	d5fb      	bpl.n	800729e <_printf_i+0xbe>
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	4854      	ldr	r0, [pc, #336]	; (80073fc <_printf_i+0x21c>)
 80072aa:	296f      	cmp	r1, #111	; 0x6f
 80072ac:	bf14      	ite	ne
 80072ae:	220a      	movne	r2, #10
 80072b0:	2208      	moveq	r2, #8
 80072b2:	2100      	movs	r1, #0
 80072b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072b8:	6865      	ldr	r5, [r4, #4]
 80072ba:	60a5      	str	r5, [r4, #8]
 80072bc:	2d00      	cmp	r5, #0
 80072be:	f2c0 8095 	blt.w	80073ec <_printf_i+0x20c>
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	f021 0104 	bic.w	r1, r1, #4
 80072c8:	6021      	str	r1, [r4, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d13d      	bne.n	800734a <_printf_i+0x16a>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	f040 808e 	bne.w	80073f0 <_printf_i+0x210>
 80072d4:	4665      	mov	r5, ip
 80072d6:	2a08      	cmp	r2, #8
 80072d8:	d10b      	bne.n	80072f2 <_printf_i+0x112>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	07db      	lsls	r3, r3, #31
 80072de:	d508      	bpl.n	80072f2 <_printf_i+0x112>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	6862      	ldr	r2, [r4, #4]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	bfde      	ittt	le
 80072e8:	2330      	movle	r3, #48	; 0x30
 80072ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072f2:	ebac 0305 	sub.w	r3, ip, r5
 80072f6:	6123      	str	r3, [r4, #16]
 80072f8:	f8cd 8000 	str.w	r8, [sp]
 80072fc:	463b      	mov	r3, r7
 80072fe:	aa03      	add	r2, sp, #12
 8007300:	4621      	mov	r1, r4
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff fef6 	bl	80070f4 <_printf_common>
 8007308:	3001      	adds	r0, #1
 800730a:	d14d      	bne.n	80073a8 <_printf_i+0x1c8>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007310:	b005      	add	sp, #20
 8007312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007316:	4839      	ldr	r0, [pc, #228]	; (80073fc <_printf_i+0x21c>)
 8007318:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800731c:	6813      	ldr	r3, [r2, #0]
 800731e:	6821      	ldr	r1, [r4, #0]
 8007320:	1d1d      	adds	r5, r3, #4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6015      	str	r5, [r2, #0]
 8007326:	060a      	lsls	r2, r1, #24
 8007328:	d50b      	bpl.n	8007342 <_printf_i+0x162>
 800732a:	07ca      	lsls	r2, r1, #31
 800732c:	bf44      	itt	mi
 800732e:	f041 0120 	orrmi.w	r1, r1, #32
 8007332:	6021      	strmi	r1, [r4, #0]
 8007334:	b91b      	cbnz	r3, 800733e <_printf_i+0x15e>
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	f022 0220 	bic.w	r2, r2, #32
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	2210      	movs	r2, #16
 8007340:	e7b7      	b.n	80072b2 <_printf_i+0xd2>
 8007342:	064d      	lsls	r5, r1, #25
 8007344:	bf48      	it	mi
 8007346:	b29b      	uxthmi	r3, r3
 8007348:	e7ef      	b.n	800732a <_printf_i+0x14a>
 800734a:	4665      	mov	r5, ip
 800734c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007350:	fb02 3311 	mls	r3, r2, r1, r3
 8007354:	5cc3      	ldrb	r3, [r0, r3]
 8007356:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800735a:	460b      	mov	r3, r1
 800735c:	2900      	cmp	r1, #0
 800735e:	d1f5      	bne.n	800734c <_printf_i+0x16c>
 8007360:	e7b9      	b.n	80072d6 <_printf_i+0xf6>
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	6825      	ldr	r5, [r4, #0]
 8007366:	6961      	ldr	r1, [r4, #20]
 8007368:	1d18      	adds	r0, r3, #4
 800736a:	6010      	str	r0, [r2, #0]
 800736c:	0628      	lsls	r0, r5, #24
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	d501      	bpl.n	8007376 <_printf_i+0x196>
 8007372:	6019      	str	r1, [r3, #0]
 8007374:	e002      	b.n	800737c <_printf_i+0x19c>
 8007376:	066a      	lsls	r2, r5, #25
 8007378:	d5fb      	bpl.n	8007372 <_printf_i+0x192>
 800737a:	8019      	strh	r1, [r3, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	6123      	str	r3, [r4, #16]
 8007380:	4665      	mov	r5, ip
 8007382:	e7b9      	b.n	80072f8 <_printf_i+0x118>
 8007384:	6813      	ldr	r3, [r2, #0]
 8007386:	1d19      	adds	r1, r3, #4
 8007388:	6011      	str	r1, [r2, #0]
 800738a:	681d      	ldr	r5, [r3, #0]
 800738c:	6862      	ldr	r2, [r4, #4]
 800738e:	2100      	movs	r1, #0
 8007390:	4628      	mov	r0, r5
 8007392:	f7f8 ff25 	bl	80001e0 <memchr>
 8007396:	b108      	cbz	r0, 800739c <_printf_i+0x1bc>
 8007398:	1b40      	subs	r0, r0, r5
 800739a:	6060      	str	r0, [r4, #4]
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	6123      	str	r3, [r4, #16]
 80073a0:	2300      	movs	r3, #0
 80073a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a6:	e7a7      	b.n	80072f8 <_printf_i+0x118>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	462a      	mov	r2, r5
 80073ac:	4639      	mov	r1, r7
 80073ae:	4630      	mov	r0, r6
 80073b0:	47c0      	blx	r8
 80073b2:	3001      	adds	r0, #1
 80073b4:	d0aa      	beq.n	800730c <_printf_i+0x12c>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	079b      	lsls	r3, r3, #30
 80073ba:	d413      	bmi.n	80073e4 <_printf_i+0x204>
 80073bc:	68e0      	ldr	r0, [r4, #12]
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	4298      	cmp	r0, r3
 80073c2:	bfb8      	it	lt
 80073c4:	4618      	movlt	r0, r3
 80073c6:	e7a3      	b.n	8007310 <_printf_i+0x130>
 80073c8:	2301      	movs	r3, #1
 80073ca:	464a      	mov	r2, r9
 80073cc:	4639      	mov	r1, r7
 80073ce:	4630      	mov	r0, r6
 80073d0:	47c0      	blx	r8
 80073d2:	3001      	adds	r0, #1
 80073d4:	d09a      	beq.n	800730c <_printf_i+0x12c>
 80073d6:	3501      	adds	r5, #1
 80073d8:	68e3      	ldr	r3, [r4, #12]
 80073da:	9a03      	ldr	r2, [sp, #12]
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	42ab      	cmp	r3, r5
 80073e0:	dcf2      	bgt.n	80073c8 <_printf_i+0x1e8>
 80073e2:	e7eb      	b.n	80073bc <_printf_i+0x1dc>
 80073e4:	2500      	movs	r5, #0
 80073e6:	f104 0919 	add.w	r9, r4, #25
 80073ea:	e7f5      	b.n	80073d8 <_printf_i+0x1f8>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ac      	bne.n	800734a <_printf_i+0x16a>
 80073f0:	7803      	ldrb	r3, [r0, #0]
 80073f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073fa:	e76c      	b.n	80072d6 <_printf_i+0xf6>
 80073fc:	08007692 	.word	0x08007692
 8007400:	080076a3 	.word	0x080076a3

08007404 <memcpy>:
 8007404:	b510      	push	{r4, lr}
 8007406:	1e43      	subs	r3, r0, #1
 8007408:	440a      	add	r2, r1
 800740a:	4291      	cmp	r1, r2
 800740c:	d100      	bne.n	8007410 <memcpy+0xc>
 800740e:	bd10      	pop	{r4, pc}
 8007410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007418:	e7f7      	b.n	800740a <memcpy+0x6>

0800741a <memmove>:
 800741a:	4288      	cmp	r0, r1
 800741c:	b510      	push	{r4, lr}
 800741e:	eb01 0302 	add.w	r3, r1, r2
 8007422:	d807      	bhi.n	8007434 <memmove+0x1a>
 8007424:	1e42      	subs	r2, r0, #1
 8007426:	4299      	cmp	r1, r3
 8007428:	d00a      	beq.n	8007440 <memmove+0x26>
 800742a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007432:	e7f8      	b.n	8007426 <memmove+0xc>
 8007434:	4283      	cmp	r3, r0
 8007436:	d9f5      	bls.n	8007424 <memmove+0xa>
 8007438:	1881      	adds	r1, r0, r2
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	42d3      	cmn	r3, r2
 800743e:	d100      	bne.n	8007442 <memmove+0x28>
 8007440:	bd10      	pop	{r4, pc}
 8007442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007446:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800744a:	e7f7      	b.n	800743c <memmove+0x22>

0800744c <_free_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4605      	mov	r5, r0
 8007450:	2900      	cmp	r1, #0
 8007452:	d045      	beq.n	80074e0 <_free_r+0x94>
 8007454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007458:	1f0c      	subs	r4, r1, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	bfb8      	it	lt
 800745e:	18e4      	addlt	r4, r4, r3
 8007460:	f000 f8d2 	bl	8007608 <__malloc_lock>
 8007464:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <_free_r+0x98>)
 8007466:	6813      	ldr	r3, [r2, #0]
 8007468:	4610      	mov	r0, r2
 800746a:	b933      	cbnz	r3, 800747a <_free_r+0x2e>
 800746c:	6063      	str	r3, [r4, #4]
 800746e:	6014      	str	r4, [r2, #0]
 8007470:	4628      	mov	r0, r5
 8007472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007476:	f000 b8c8 	b.w	800760a <__malloc_unlock>
 800747a:	42a3      	cmp	r3, r4
 800747c:	d90c      	bls.n	8007498 <_free_r+0x4c>
 800747e:	6821      	ldr	r1, [r4, #0]
 8007480:	1862      	adds	r2, r4, r1
 8007482:	4293      	cmp	r3, r2
 8007484:	bf04      	itt	eq
 8007486:	681a      	ldreq	r2, [r3, #0]
 8007488:	685b      	ldreq	r3, [r3, #4]
 800748a:	6063      	str	r3, [r4, #4]
 800748c:	bf04      	itt	eq
 800748e:	1852      	addeq	r2, r2, r1
 8007490:	6022      	streq	r2, [r4, #0]
 8007492:	6004      	str	r4, [r0, #0]
 8007494:	e7ec      	b.n	8007470 <_free_r+0x24>
 8007496:	4613      	mov	r3, r2
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	b10a      	cbz	r2, 80074a0 <_free_r+0x54>
 800749c:	42a2      	cmp	r2, r4
 800749e:	d9fa      	bls.n	8007496 <_free_r+0x4a>
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	1858      	adds	r0, r3, r1
 80074a4:	42a0      	cmp	r0, r4
 80074a6:	d10b      	bne.n	80074c0 <_free_r+0x74>
 80074a8:	6820      	ldr	r0, [r4, #0]
 80074aa:	4401      	add	r1, r0
 80074ac:	1858      	adds	r0, r3, r1
 80074ae:	4282      	cmp	r2, r0
 80074b0:	6019      	str	r1, [r3, #0]
 80074b2:	d1dd      	bne.n	8007470 <_free_r+0x24>
 80074b4:	6810      	ldr	r0, [r2, #0]
 80074b6:	6852      	ldr	r2, [r2, #4]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	4401      	add	r1, r0
 80074bc:	6019      	str	r1, [r3, #0]
 80074be:	e7d7      	b.n	8007470 <_free_r+0x24>
 80074c0:	d902      	bls.n	80074c8 <_free_r+0x7c>
 80074c2:	230c      	movs	r3, #12
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	e7d3      	b.n	8007470 <_free_r+0x24>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	1821      	adds	r1, r4, r0
 80074cc:	428a      	cmp	r2, r1
 80074ce:	bf04      	itt	eq
 80074d0:	6811      	ldreq	r1, [r2, #0]
 80074d2:	6852      	ldreq	r2, [r2, #4]
 80074d4:	6062      	str	r2, [r4, #4]
 80074d6:	bf04      	itt	eq
 80074d8:	1809      	addeq	r1, r1, r0
 80074da:	6021      	streq	r1, [r4, #0]
 80074dc:	605c      	str	r4, [r3, #4]
 80074de:	e7c7      	b.n	8007470 <_free_r+0x24>
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	bf00      	nop
 80074e4:	20000090 	.word	0x20000090

080074e8 <_malloc_r>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	1ccd      	adds	r5, r1, #3
 80074ec:	f025 0503 	bic.w	r5, r5, #3
 80074f0:	3508      	adds	r5, #8
 80074f2:	2d0c      	cmp	r5, #12
 80074f4:	bf38      	it	cc
 80074f6:	250c      	movcc	r5, #12
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	4606      	mov	r6, r0
 80074fc:	db01      	blt.n	8007502 <_malloc_r+0x1a>
 80074fe:	42a9      	cmp	r1, r5
 8007500:	d903      	bls.n	800750a <_malloc_r+0x22>
 8007502:	230c      	movs	r3, #12
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	2000      	movs	r0, #0
 8007508:	bd70      	pop	{r4, r5, r6, pc}
 800750a:	f000 f87d 	bl	8007608 <__malloc_lock>
 800750e:	4a21      	ldr	r2, [pc, #132]	; (8007594 <_malloc_r+0xac>)
 8007510:	6814      	ldr	r4, [r2, #0]
 8007512:	4621      	mov	r1, r4
 8007514:	b991      	cbnz	r1, 800753c <_malloc_r+0x54>
 8007516:	4c20      	ldr	r4, [pc, #128]	; (8007598 <_malloc_r+0xb0>)
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	b91b      	cbnz	r3, 8007524 <_malloc_r+0x3c>
 800751c:	4630      	mov	r0, r6
 800751e:	f000 f863 	bl	80075e8 <_sbrk_r>
 8007522:	6020      	str	r0, [r4, #0]
 8007524:	4629      	mov	r1, r5
 8007526:	4630      	mov	r0, r6
 8007528:	f000 f85e 	bl	80075e8 <_sbrk_r>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d124      	bne.n	800757a <_malloc_r+0x92>
 8007530:	230c      	movs	r3, #12
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	4630      	mov	r0, r6
 8007536:	f000 f868 	bl	800760a <__malloc_unlock>
 800753a:	e7e4      	b.n	8007506 <_malloc_r+0x1e>
 800753c:	680b      	ldr	r3, [r1, #0]
 800753e:	1b5b      	subs	r3, r3, r5
 8007540:	d418      	bmi.n	8007574 <_malloc_r+0x8c>
 8007542:	2b0b      	cmp	r3, #11
 8007544:	d90f      	bls.n	8007566 <_malloc_r+0x7e>
 8007546:	600b      	str	r3, [r1, #0]
 8007548:	50cd      	str	r5, [r1, r3]
 800754a:	18cc      	adds	r4, r1, r3
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f85c 	bl	800760a <__malloc_unlock>
 8007552:	f104 000b 	add.w	r0, r4, #11
 8007556:	1d23      	adds	r3, r4, #4
 8007558:	f020 0007 	bic.w	r0, r0, #7
 800755c:	1ac3      	subs	r3, r0, r3
 800755e:	d0d3      	beq.n	8007508 <_malloc_r+0x20>
 8007560:	425a      	negs	r2, r3
 8007562:	50e2      	str	r2, [r4, r3]
 8007564:	e7d0      	b.n	8007508 <_malloc_r+0x20>
 8007566:	428c      	cmp	r4, r1
 8007568:	684b      	ldr	r3, [r1, #4]
 800756a:	bf16      	itet	ne
 800756c:	6063      	strne	r3, [r4, #4]
 800756e:	6013      	streq	r3, [r2, #0]
 8007570:	460c      	movne	r4, r1
 8007572:	e7eb      	b.n	800754c <_malloc_r+0x64>
 8007574:	460c      	mov	r4, r1
 8007576:	6849      	ldr	r1, [r1, #4]
 8007578:	e7cc      	b.n	8007514 <_malloc_r+0x2c>
 800757a:	1cc4      	adds	r4, r0, #3
 800757c:	f024 0403 	bic.w	r4, r4, #3
 8007580:	42a0      	cmp	r0, r4
 8007582:	d005      	beq.n	8007590 <_malloc_r+0xa8>
 8007584:	1a21      	subs	r1, r4, r0
 8007586:	4630      	mov	r0, r6
 8007588:	f000 f82e 	bl	80075e8 <_sbrk_r>
 800758c:	3001      	adds	r0, #1
 800758e:	d0cf      	beq.n	8007530 <_malloc_r+0x48>
 8007590:	6025      	str	r5, [r4, #0]
 8007592:	e7db      	b.n	800754c <_malloc_r+0x64>
 8007594:	20000090 	.word	0x20000090
 8007598:	20000094 	.word	0x20000094

0800759c <_realloc_r>:
 800759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759e:	4607      	mov	r7, r0
 80075a0:	4614      	mov	r4, r2
 80075a2:	460e      	mov	r6, r1
 80075a4:	b921      	cbnz	r1, 80075b0 <_realloc_r+0x14>
 80075a6:	4611      	mov	r1, r2
 80075a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075ac:	f7ff bf9c 	b.w	80074e8 <_malloc_r>
 80075b0:	b922      	cbnz	r2, 80075bc <_realloc_r+0x20>
 80075b2:	f7ff ff4b 	bl	800744c <_free_r>
 80075b6:	4625      	mov	r5, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075bc:	f000 f826 	bl	800760c <_malloc_usable_size_r>
 80075c0:	42a0      	cmp	r0, r4
 80075c2:	d20f      	bcs.n	80075e4 <_realloc_r+0x48>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4638      	mov	r0, r7
 80075c8:	f7ff ff8e 	bl	80074e8 <_malloc_r>
 80075cc:	4605      	mov	r5, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d0f2      	beq.n	80075b8 <_realloc_r+0x1c>
 80075d2:	4631      	mov	r1, r6
 80075d4:	4622      	mov	r2, r4
 80075d6:	f7ff ff15 	bl	8007404 <memcpy>
 80075da:	4631      	mov	r1, r6
 80075dc:	4638      	mov	r0, r7
 80075de:	f7ff ff35 	bl	800744c <_free_r>
 80075e2:	e7e9      	b.n	80075b8 <_realloc_r+0x1c>
 80075e4:	4635      	mov	r5, r6
 80075e6:	e7e7      	b.n	80075b8 <_realloc_r+0x1c>

080075e8 <_sbrk_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4c06      	ldr	r4, [pc, #24]	; (8007604 <_sbrk_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4605      	mov	r5, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	f7ff faf2 	bl	8006bdc <_sbrk>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_sbrk_r+0x1a>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_sbrk_r+0x1a>
 8007600:	602b      	str	r3, [r5, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	2000079c 	.word	0x2000079c

08007608 <__malloc_lock>:
 8007608:	4770      	bx	lr

0800760a <__malloc_unlock>:
 800760a:	4770      	bx	lr

0800760c <_malloc_usable_size_r>:
 800760c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007610:	1f18      	subs	r0, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	bfbc      	itt	lt
 8007616:	580b      	ldrlt	r3, [r1, r0]
 8007618:	18c0      	addlt	r0, r0, r3
 800761a:	4770      	bx	lr

0800761c <_init>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr

08007628 <_fini>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	bf00      	nop
 800762c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762e:	bc08      	pop	{r3}
 8007630:	469e      	mov	lr, r3
 8007632:	4770      	bx	lr
